
/*
  DO NOT EDIT!
  This file has been generated by generate_sources.py script.
  $Id: html.cpp 36484 2010-11-22 07:20:39Z santonov $
*/

#include "precomp.h"

dom::DOMException::DOMException(): code() {}
bool dom::DOMImplementation::hasFeature(std::string val_feature, std::string val_version)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
v8::Handle<v8::Value> dom::DOMImplementation::createDocumentType(std::string val_qualifiedName, std::string val_publicId, std::string val_systemId)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::DOMImplementation::createDocument(std::string val_namespaceURI, std::string val_qualifiedName, v8::Handle<v8::Value> val_doctype)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
dom::DOMImplementation::DOMImplementation() {}
v8::Handle<v8::Value> dom::Node::insertBefore(v8::Handle<v8::Value> val_newChild, v8::Handle<v8::Value> val_refChild)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Node::replaceChild(v8::Handle<v8::Value> val_newChild, v8::Handle<v8::Value> val_oldChild)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Node::removeChild(v8::Handle<v8::Value> val_oldChild)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Node::appendChild(v8::Handle<v8::Value> val_newChild)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
bool dom::Node::hasChildNodes()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
v8::Handle<v8::Value> dom::Node::cloneNode(bool val_deep)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void dom::Node::normalize()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
bool dom::Node::isSupported(std::string val_feature, std::string val_version)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
bool dom::Node::hasAttributes()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
short unsigned int dom::Node::compareDocumentPosition(v8::Handle<v8::Value> val_other)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
dom::Node::Node(): nodeName(), nodeValue(), nodeType(), parentNode(), childNodes(), firstChild(), lastChild(), previousSibling(), nextSibling(), attributes(), ownerDocument(), namespaceURI(), prefix(), localName() {}
v8::Handle<v8::Value> dom::NodeList::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
dom::NodeList::NodeList(): length() {}
v8::Handle<v8::Value> dom::NamedNodeMap::getNamedItem(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::setNamedItem(v8::Handle<v8::Value> val_arg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::removeNamedItem(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::getNamedItemNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::setNamedItemNS(v8::Handle<v8::Value> val_arg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::NamedNodeMap::removeNamedItemNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
dom::NamedNodeMap::NamedNodeMap(): length() {}
std::string dom::CharacterData::substringData(long unsigned int val_offset, long unsigned int val_count)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return std::string() ;
}
void dom::CharacterData::appendData(std::string val_arg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void dom::CharacterData::insertData(long unsigned int val_offset, std::string val_arg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void dom::CharacterData::deleteData(long unsigned int val_offset, long unsigned int val_count)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void dom::CharacterData::replaceData(long unsigned int val_offset, long unsigned int val_count, std::string val_arg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
dom::CharacterData::CharacterData(): data(), length() {}
dom::Attr::Attr(): name(), specified(), value(), ownerElement() {}
std::string dom::Element::getAttribute(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return std::string() ;
}
void dom::Element::setAttribute(std::string val_name, std::string val_value)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void dom::Element::removeAttribute(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> dom::Element::getAttributeNode(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Element::setAttributeNode(v8::Handle<v8::Value> val_newAttr)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Element::removeAttributeNode(v8::Handle<v8::Value> val_oldAttr)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Element::getElementsByTagName(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
std::string dom::Element::getAttributeNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return std::string() ;
}
void dom::Element::setAttributeNS(std::string val_namespaceURI, std::string val_qualifiedName, std::string val_value)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void dom::Element::removeAttributeNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> dom::Element::getAttributeNodeNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Element::setAttributeNodeNS(v8::Handle<v8::Value> val_newAttr)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Element::getElementsByTagNameNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
bool dom::Element::hasAttribute(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
bool dom::Element::hasAttributeNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
dom::Element::Element(): tagName() {}
v8::Handle<v8::Value> dom::Text::splitText(long unsigned int val_offset)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
dom::Text::Text() {}
dom::Comment::Comment() {}
dom::CDATASection::CDATASection() {}
dom::DocumentType::DocumentType(): name(), entities(), notations(), publicId(), systemId(), internalSubset() {}
dom::Notation::Notation(): publicId(), systemId() {}
dom::Entity::Entity(): publicId(), systemId(), notationName() {}
dom::EntityReference::EntityReference() {}
dom::ProcessingInstruction::ProcessingInstruction(): target(), data() {}
dom::DocumentFragment::DocumentFragment() {}
v8::Handle<v8::Value> dom::Document::createElement(std::string val_tagName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createDocumentFragment()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createTextNode(std::string val_data)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createComment(std::string val_data)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createCDATASection(std::string val_data)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createProcessingInstruction(std::string val_target, std::string val_data)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createAttribute(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createEntityReference(std::string val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::getElementsByTagName(std::string val_tagname)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::importNode(v8::Handle<v8::Value> val_importedNode, bool val_deep)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createElementNS(std::string val_namespaceURI, std::string val_qualifiedName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::createAttributeNS(std::string val_namespaceURI, std::string val_qualifiedName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::getElementsByTagNameNS(std::string val_namespaceURI, std::string val_localName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> dom::Document::getElementById(std::string val_elementId)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
dom::Document::Document(): doctype(), implementation(), documentElement() {}
stylesheets::StyleSheet::StyleSheet(): type(), disabled(), ownerNode(), parentStyleSheet(), href(), title(), media() {}
v8::Handle<v8::Value> stylesheets::StyleSheetList::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
stylesheets::StyleSheetList::StyleSheetList(): length() {}
stylesheets::DOMString stylesheets::MediaList::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return stylesheets::DOMString() ;
}
void stylesheets::MediaList::deleteMedium(stylesheets::DOMString val_oldMedium)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void stylesheets::MediaList::appendMedium(stylesheets::DOMString val_newMedium)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
stylesheets::MediaList::MediaList(): mediaText(), length() {}
stylesheets::LinkStyle::LinkStyle(): sheet() {}
stylesheets::DocumentStyle::DocumentStyle(): styleSheets() {}
views::AbstractView::AbstractView(): document() {}
views::DocumentView::DocumentView(): defaultView() {}
v8::Handle<v8::Value> css::CSSRuleList::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::CSSRuleList::CSSRuleList(): length() {}
css::CSSRule::CSSRule(): type(), cssText(), parentStyleSheet(), parentRule() {}
css::CSSStyleRule::CSSStyleRule(): selectorText(), style() {}
long unsigned int css::CSSMediaRule::insertRule(css::DOMString val_rule, long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
void css::CSSMediaRule::deleteRule(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
css::CSSMediaRule::CSSMediaRule(): media(), cssRules() {}
css::CSSFontFaceRule::CSSFontFaceRule(): style() {}
css::CSSPageRule::CSSPageRule(): selectorText(), style() {}
css::CSSImportRule::CSSImportRule(): href(), media(), styleSheet() {}
css::CSSCharsetRule::CSSCharsetRule(): encoding() {}
css::CSSUnknownRule::CSSUnknownRule() {}
css::DOMString css::CSSStyleDeclaration::getPropertyValue(css::DOMString val_propertyName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return css::DOMString() ;
}
v8::Handle<v8::Value> css::CSSStyleDeclaration::getPropertyCSSValue(css::DOMString val_propertyName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::DOMString css::CSSStyleDeclaration::removeProperty(css::DOMString val_propertyName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return css::DOMString() ;
}
css::DOMString css::CSSStyleDeclaration::getPropertyPriority(css::DOMString val_propertyName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return css::DOMString() ;
}
void css::CSSStyleDeclaration::setProperty(css::DOMString val_propertyName, css::DOMString val_value, css::DOMString val_priority)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
css::DOMString css::CSSStyleDeclaration::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return css::DOMString() ;
}
css::CSSStyleDeclaration::CSSStyleDeclaration(): cssText(), length(), parentRule() {}
css::CSSValue::CSSValue(): cssText(), cssValueType() {}
void css::CSSPrimitiveValue::setFloatValue(short unsigned int val_unitType, double val_floatValue)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
double css::CSSPrimitiveValue::getFloatValue(short unsigned int val_unitType)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
void css::CSSPrimitiveValue::setStringValue(short unsigned int val_stringType, css::DOMString val_stringValue)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
css::DOMString css::CSSPrimitiveValue::getStringValue()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return css::DOMString() ;
}
v8::Handle<v8::Value> css::CSSPrimitiveValue::getCounterValue()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> css::CSSPrimitiveValue::getRectValue()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> css::CSSPrimitiveValue::getRGBColorValue()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::CSSPrimitiveValue::CSSPrimitiveValue(): primitiveType() {}
v8::Handle<v8::Value> css::CSSValueList::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::CSSValueList::CSSValueList(): length() {}
css::RGBColor::RGBColor(): red(), green(), blue() {}
css::Rect::Rect(): top(), right(), bottom(), left() {}
css::Counter::Counter(): identifier(), listStyle(), separator() {}
css::ElementCSSInlineStyle::ElementCSSInlineStyle(): style() {}
css::CSS2Properties::CSS2Properties(): azimuth(), background(), backgroundAttachment(), backgroundColor(), backgroundImage(), backgroundPosition(), backgroundRepeat(), border(), borderCollapse(), borderColor(), borderSpacing(), borderStyle(), borderTop(), borderRight(), borderBottom(), borderLeft(), borderTopColor(), borderRightColor(), borderBottomColor(), borderLeftColor(), borderTopStyle(), borderRightStyle(), borderBottomStyle(), borderLeftStyle(), borderTopWidth(), borderRightWidth(), borderBottomWidth(), borderLeftWidth(), borderWidth(), bottom(), captionSide(), clear(), clip(), color(), content(), counterIncrement(), counterReset(), cue(), cueAfter(), cueBefore(), cursor(), direction(), display(), elevation(), emptyCells(), cssFloat(), font(), fontFamily(), fontSize(), fontSizeAdjust(), fontStretch(), fontStyle(), fontVariant(), fontWeight(), height(), left(), letterSpacing(), lineHeight(), listStyle(), listStyleImage(), listStylePosition(), listStyleType(), margin(), marginTop(), marginRight(), marginBottom(), marginLeft(), markerOffset(), marks(), maxHeight(), maxWidth(), minHeight(), minWidth(), orphans(), outline(), outlineColor(), outlineStyle(), outlineWidth(), overflow(), padding(), paddingTop(), paddingRight(), paddingBottom(), paddingLeft(), page(), pageBreakAfter(), pageBreakBefore(), pageBreakInside(), pause(), pauseAfter(), pauseBefore(), pitch(), pitchRange(), playDuring(), position(), quotes(), richness(), right(), size(), speak(), speakHeader(), speakNumeral(), speakPunctuation(), speechRate(), stress(), tableLayout(), textAlign(), textDecoration(), textIndent(), textShadow(), textTransform(), top(), unicodeBidi(), verticalAlign(), visibility(), voiceFamily(), volume(), whiteSpace(), widows(), width(), wordSpacing(), zIndex() {}
long unsigned int css::CSSStyleSheet::insertRule(css::DOMString val_rule, long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
void css::CSSStyleSheet::deleteRule(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
css::CSSStyleSheet::CSSStyleSheet(): ownerRule(), cssRules() {}
v8::Handle<v8::Value> css::ViewCSS::getComputedStyle(v8::Handle<v8::Value> val_elt, css::DOMString val_pseudoElt)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::ViewCSS::ViewCSS() {}
v8::Handle<v8::Value> css::DocumentCSS::getOverrideStyle(v8::Handle<v8::Value> val_elt, css::DOMString val_pseudoElt)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::DocumentCSS::DocumentCSS() {}
v8::Handle<v8::Value> css::DOMImplementationCSS::createCSSStyleSheet(css::DOMString val_title, css::DOMString val_media)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
css::DOMImplementationCSS::DOMImplementationCSS() {}
events::EventException::EventException(): code() {}
void events::EventTarget::addEventListener(events::DOMString val_type, v8::Handle<v8::Value> val_listener, bool val_useCapture)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void events::EventTarget::removeEventListener(events::DOMString val_type, v8::Handle<v8::Value> val_listener, bool val_useCapture)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
bool events::EventTarget::dispatchEvent(v8::Handle<v8::Value> val_evt)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
events::EventTarget::EventTarget() {}
void events::EventListener::handleEvent(v8::Handle<v8::Value> val_evt)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
events::EventListener::EventListener() {}
void events::Event::stopPropagation()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void events::Event::preventDefault()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void events::Event::initEvent(events::DOMString val_eventTypeArg, bool val_canBubbleArg, bool val_cancelableArg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
events::Event::Event(): type(), target(), currentTarget(), eventPhase(), bubbles(), cancelable(), timeStamp() {}
v8::Handle<v8::Value> events::DocumentEvent::createEvent(events::DOMString val_eventType)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
events::DocumentEvent::DocumentEvent() {}
void events::UIEvent::initUIEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_viewArg, long int val_detailArg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
events::UIEvent::UIEvent(): view(), detail() {}
void events::MouseEvent::initMouseEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_viewArg, long int val_detailArg, long int val_screenXArg, long int val_screenYArg, long int val_clientXArg, long int val_clientYArg, bool val_ctrlKeyArg, bool val_altKeyArg, bool val_shiftKeyArg, bool val_metaKeyArg, short unsigned int val_buttonArg, v8::Handle<v8::Value> val_relatedTargetArg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
events::MouseEvent::MouseEvent(): screenX(), screenY(), clientX(), clientY(), ctrlKey(), shiftKey(), altKey(), metaKey(), button(), relatedTarget() {}
void events::MutationEvent::initMutationEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_relatedNodeArg, events::DOMString val_prevValueArg, events::DOMString val_newValueArg, events::DOMString val_attrNameArg, short unsigned int val_attrChangeArg)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
events::MutationEvent::MutationEvent(): relatedNode(), prevValue(), newValue(), attrName(), attrChange() {}
v8::Handle<v8::Value> html2::HTMLCollection::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> html2::HTMLCollection::namedItem(html2::DOMString val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
html2::HTMLCollection::HTMLCollection(): length() {}
v8::Handle<v8::Value> html2::HTMLOptionsCollection::item(long unsigned int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> html2::HTMLOptionsCollection::namedItem(html2::DOMString val_name)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
html2::HTMLOptionsCollection::HTMLOptionsCollection(): length() {}
void html2::HTMLDocument::open()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLDocument::close()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLDocument::write(html2::DOMString val_text)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLDocument::writeln(html2::DOMString val_text)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> html2::HTMLDocument::getElementsByName(html2::DOMString val_elementName)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
html2::HTMLDocument::HTMLDocument(): title(), referrer(), domain(), URL(), body(), images(), applets(), links(), forms(), anchors(), cookie(), innerHTML() {}
html2::HTMLElement::HTMLElement(): id(), title(), lang(), dir(), className(), style(), innerHTML() {}
html2::HTMLHtmlElement::HTMLHtmlElement(): version() {}
html2::HTMLHeadElement::HTMLHeadElement(): profile() {}
html2::HTMLLinkElement::HTMLLinkElement(): disabled(), charset(), href(), hreflang(), media(), rel(), rev(), target(), type() {}
html2::HTMLTitleElement::HTMLTitleElement(): text() {}
html2::HTMLMetaElement::HTMLMetaElement(): content(), httpEquiv(), name(), scheme() {}
html2::HTMLBaseElement::HTMLBaseElement(): href(), target() {}
html2::HTMLIsIndexElement::HTMLIsIndexElement(): form(), prompt() {}
html2::HTMLStyleElement::HTMLStyleElement(): disabled(), media(), type() {}
html2::HTMLBodyElement::HTMLBodyElement(): aLink(), background(), bgColor(), link(), text(), vLink() {}
void html2::HTMLFormElement::submit()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLFormElement::reset()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLFormElement::HTMLFormElement(): elements(), length(), name(), acceptCharset(), action(), enctype(), method(), target() {}
void html2::HTMLSelectElement::add(v8::Handle<v8::Value> val_element, v8::Handle<v8::Value> val_before)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLSelectElement::remove(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLSelectElement::blur()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLSelectElement::focus()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLSelectElement::HTMLSelectElement(): type(), selectedIndex(), value(), length(), form(), options(), disabled(), multiple(), name(), size(), tabIndex() {}
html2::HTMLOptGroupElement::HTMLOptGroupElement(): disabled(), label() {}
html2::HTMLOptionElement::HTMLOptionElement(): form(), defaultSelected(), text(), index(), disabled(), label(), selected(), value() {}
void html2::HTMLInputElement::blur()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLInputElement::focus()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLInputElement::select()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLInputElement::click()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLInputElement::HTMLInputElement(): defaultValue(), defaultChecked(), form(), accept(), accessKey(), align(), alt(), checked(), disabled(), maxLength(), name(), readOnly(), size(), src(), tabIndex(), type(), useMap(), value() {}
void html2::HTMLTextAreaElement::blur()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLTextAreaElement::focus()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLTextAreaElement::select()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLTextAreaElement::HTMLTextAreaElement(): defaultValue(), form(), accessKey(), cols(), disabled(), name(), readOnly(), rows(), tabIndex(), type(), value() {}
html2::HTMLButtonElement::HTMLButtonElement(): form(), accessKey(), disabled(), name(), tabIndex(), type(), value() {}
html2::HTMLLabelElement::HTMLLabelElement(): form(), accessKey(), htmlFor() {}
html2::HTMLFieldSetElement::HTMLFieldSetElement(): form() {}
html2::HTMLLegendElement::HTMLLegendElement(): form(), accessKey(), align() {}
html2::HTMLUListElement::HTMLUListElement(): compact(), type() {}
html2::HTMLOListElement::HTMLOListElement(): compact(), start(), type() {}
html2::HTMLDListElement::HTMLDListElement(): compact() {}
html2::HTMLDirectoryElement::HTMLDirectoryElement(): compact() {}
html2::HTMLMenuElement::HTMLMenuElement(): compact() {}
html2::HTMLLIElement::HTMLLIElement(): type(), value() {}
html2::HTMLDivElement::HTMLDivElement(): align() {}
html2::HTMLParagraphElement::HTMLParagraphElement(): align() {}
html2::HTMLHeadingElement::HTMLHeadingElement(): align() {}
html2::HTMLQuoteElement::HTMLQuoteElement(): cite() {}
html2::HTMLPreElement::HTMLPreElement(): width() {}
html2::HTMLBRElement::HTMLBRElement(): clear() {}
html2::HTMLBaseFontElement::HTMLBaseFontElement(): color(), face(), size() {}
html2::HTMLFontElement::HTMLFontElement(): color(), face(), size() {}
html2::HTMLHRElement::HTMLHRElement(): align(), noShade(), size(), width() {}
html2::HTMLModElement::HTMLModElement(): cite(), dateTime() {}
void html2::HTMLAnchorElement::blur()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void html2::HTMLAnchorElement::focus()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLAnchorElement::HTMLAnchorElement(): accessKey(), charset(), coords(), href(), hreflang(), name(), rel(), rev(), shape(), tabIndex(), target(), type() {}
html2::HTMLImageElement::HTMLImageElement(): name(), align(), alt(), border(), height(), hspace(), isMap(), longDesc(), src(), useMap(), vspace(), width() {}
html2::HTMLObjectElement::HTMLObjectElement(): form(), code(), align(), archive(), border(), codeBase(), codeType(), data(), declare(), height(), hspace(), name(), standby(), tabIndex(), type(), useMap(), vspace(), width(), contentDocument() {}
html2::HTMLParamElement::HTMLParamElement(): name(), type(), value(), valueType() {}
html2::HTMLAppletElement::HTMLAppletElement(): align(), alt(), archive(), code(), codeBase(), height(), hspace(), name(), object(), vspace(), width() {}
html2::HTMLMapElement::HTMLMapElement(): areas(), name() {}
html2::HTMLAreaElement::HTMLAreaElement(): accessKey(), alt(), coords(), href(), noHref(), shape(), tabIndex(), target() {}
html2::HTMLScriptElement::HTMLScriptElement(): text(), htmlFor(), event(), charset(), defer(), src(), type() {}
v8::Handle<v8::Value> html2::HTMLTableElement::createTHead()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableElement::deleteTHead()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> html2::HTMLTableElement::createTFoot()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableElement::deleteTFoot()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> html2::HTMLTableElement::createCaption()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableElement::deleteCaption()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> html2::HTMLTableElement::insertRow(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableElement::deleteRow(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLTableElement::HTMLTableElement(): caption(), tHead(), tFoot(), rows(), tBodies(), align(), bgColor(), border(), cellPadding(), cellSpacing(), frame(), rules(), summary(), width() {}
html2::HTMLTableCaptionElement::HTMLTableCaptionElement(): align() {}
html2::HTMLTableColElement::HTMLTableColElement(): align(), ch(), chOff(), span(), vAlign(), width() {}
v8::Handle<v8::Value> html2::HTMLTableSectionElement::insertRow(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableSectionElement::deleteRow(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLTableSectionElement::HTMLTableSectionElement(): align(), ch(), chOff(), vAlign(), rows() {}
v8::Handle<v8::Value> html2::HTMLTableRowElement::insertCell(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void html2::HTMLTableRowElement::deleteCell(long int val_index)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
html2::HTMLTableRowElement::HTMLTableRowElement(): rowIndex(), sectionRowIndex(), cells(), align(), bgColor(), ch(), chOff(), vAlign() {}
html2::HTMLTableCellElement::HTMLTableCellElement(): cellIndex(), abbr(), align(), axis(), bgColor(), ch(), chOff(), colSpan(), headers(), height(), noWrap(), rowSpan(), scope(), vAlign(), width() {}
html2::HTMLFrameSetElement::HTMLFrameSetElement(): cols(), rows() {}
html2::HTMLFrameElement::HTMLFrameElement(): frameBorder(), longDesc(), marginHeight(), marginWidth(), name(), noResize(), scrolling(), src(), contentDocument() {}
html2::HTMLIFrameElement::HTMLIFrameElement(): align(), frameBorder(), height(), longDesc(), marginHeight(), marginWidth(), name(), scrolling(), src(), width(), contentDocument() {}
ranges::RangeException::RangeException(): code() {}
void ranges::Range::setStart(v8::Handle<v8::Value> val_refNode, long int val_offset)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::setEnd(v8::Handle<v8::Value> val_refNode, long int val_offset)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::setStartBefore(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::setStartAfter(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::setEndBefore(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::setEndAfter(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::collapse(bool val_toStart)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::selectNode(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::selectNodeContents(v8::Handle<v8::Value> val_refNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
short int ranges::Range::compareBoundaryPoints(short unsigned int val_how, v8::Handle<v8::Value> val_sourceRange)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
void ranges::Range::deleteContents()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> ranges::Range::extractContents()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> ranges::Range::cloneContents()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void ranges::Range::insertNode(v8::Handle<v8::Value> val_newNode)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
void ranges::Range::surroundContents(v8::Handle<v8::Value> val_newParent)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
v8::Handle<v8::Value> ranges::Range::cloneRange()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
ranges::DOMString ranges::Range::toString()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return ranges::DOMString() ;
}
void ranges::Range::detach()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
ranges::Range::Range(): startContainer(), startOffset(), endContainer(), endOffset(), collapsed(), commonAncestorContainer() {}
v8::Handle<v8::Value> ranges::DocumentRange::createRange()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
ranges::DocumentRange::DocumentRange() {}
v8::Handle<v8::Value> traversal::NodeIterator::nextNode()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::NodeIterator::previousNode()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
void traversal::NodeIterator::detach()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return  ;
}
traversal::NodeIterator::NodeIterator(): root(), whatToShow(), filter(), expandEntityReferences() {}
short int traversal::NodeFilter::acceptNode(v8::Handle<v8::Value> val_n)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return 0 ;
}
traversal::NodeFilter::NodeFilter() {}
v8::Handle<v8::Value> traversal::TreeWalker::parentNode()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::firstChild()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::lastChild()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::previousSibling()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::nextSibling()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::previousNode()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::TreeWalker::nextNode()
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
traversal::TreeWalker::TreeWalker(): root(), whatToShow(), filter(), expandEntityReferences(), currentNode() {}
v8::Handle<v8::Value> traversal::DocumentTraversal::createNodeIterator(v8::Handle<v8::Value> val_root, long unsigned int val_whatToShow, v8::Handle<v8::Value> val_filter, bool val_entityReferenceExpansion)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
v8::Handle<v8::Value> traversal::DocumentTraversal::createTreeWalker(v8::Handle<v8::Value> val_root, long unsigned int val_whatToShow, v8::Handle<v8::Value> val_filter, bool val_entityReferenceExpansion)
{
    v8::ThrowException(v8::String::New((std::string("Method '") +  __FUNCTION__ + "' not implemented").c_str()));
    return v8::Handle<v8::Value>() ;
}
traversal::DocumentTraversal::DocumentTraversal() {}
