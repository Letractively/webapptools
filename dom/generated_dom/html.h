#ifndef __idl_header___
#define __idl_header___

/*
  DO NOT EDIT!
  This file has been generated by wrap_idl.py script.
  $Id: html.h 36434 2010-11-19 12:42:46Z santonov $
*/

#include <string>
#include <v8.h>

namespace dom {
typedef unsigned long long DOMTimeStamp;
class DocumentType;
class Document;
class NodeList;
class NamedNodeMap;
class Element;
class DOMException {
public:
    DOMException();
    unsigned short code;
};
enum  {
    INDEX_SIZE_ERR = 1,
    DOMSTRING_SIZE_ERR = 2,
    HIERARCHY_REQUEST_ERR = 3,
    WRONG_DOCUMENT_ERR = 4,
    INVALID_CHARACTER_ERR = 5,
    NO_DATA_ALLOWED_ERR = 6,
    NO_MODIFICATION_ALLOWED_ERR = 7,
    NOT_FOUND_ERR = 8,
    NOT_SUPPORTED_ERR = 9,
    INUSE_ATTRIBUTE_ERR = 10,
    INVALID_STATE_ERR = 11,
    SYNTAX_ERR = 12,
    INVALID_MODIFICATION_ERR = 13,
    NAMESPACE_ERR = 14,
    INVALID_ACCESS_ERR = 15,
};
class DOMImplementation {
public:
    DOMImplementation();
    virtual bool hasFeature( std::string feature,  std::string version) ;
    virtual v8::Handle<v8::Value> /*::dom::DocumentType*/  createDocumentType( std::string qualifiedName,  std::string publicId,  std::string systemId) ;
    virtual v8::Handle<v8::Value> /*::dom::Document*/  createDocument( std::string namespaceURI,  std::string qualifiedName,   v8::Handle<v8::Value> /*::dom::DocumentType*/  doctype) ;
};
class Node {
public:
    Node();
    enum  {
        ELEMENT_NODE = 1,
        ATTRIBUTE_NODE = 2,
        TEXT_NODE = 3,
        CDATA_SECTION_NODE = 4,
        ENTITY_REFERENCE_NODE = 5,
        ENTITY_NODE = 6,
        PROCESSING_INSTRUCTION_NODE = 7,
        COMMENT_NODE = 8,
        DOCUMENT_NODE = 9,
        DOCUMENT_TYPE_NODE = 10,
        DOCUMENT_FRAGMENT_NODE = 11,
        NOTATION_NODE = 12,
    };
    const  std::string nodeName;
    std::string nodeValue;
    const  unsigned short nodeType;
    const   v8::Handle<v8::Value> /*::dom::Node*/  parentNode;
    const   v8::Handle<v8::Value> /*::dom::NodeList*/  childNodes;
    const   v8::Handle<v8::Value> /*::dom::Node*/  firstChild;
    const   v8::Handle<v8::Value> /*::dom::Node*/  lastChild;
    const   v8::Handle<v8::Value> /*::dom::Node*/  previousSibling;
    const   v8::Handle<v8::Value> /*::dom::Node*/  nextSibling;
    const   v8::Handle<v8::Value> /*::dom::NamedNodeMap*/  attributes;
    const   v8::Handle<v8::Value> /*::dom::Document*/  ownerDocument;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  insertBefore(  v8::Handle<v8::Value> /*::dom::Node*/  newChild,   v8::Handle<v8::Value> /*::dom::Node*/  refChild) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  replaceChild(  v8::Handle<v8::Value> /*::dom::Node*/  newChild,   v8::Handle<v8::Value> /*::dom::Node*/  oldChild) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  removeChild(  v8::Handle<v8::Value> /*::dom::Node*/  oldChild) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  appendChild(  v8::Handle<v8::Value> /*::dom::Node*/  newChild) ;
    virtual bool hasChildNodes() ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  cloneNode( bool deep) ;
    virtual void normalize() ;
    virtual bool isSupported( std::string feature,  std::string version) ;
    const  std::string namespaceURI;
    std::string prefix;
    const  std::string localName;
    virtual bool hasAttributes() ;
    virtual unsigned short compareDocumentPosition(  v8::Handle<v8::Value> /*::dom::Node*/  other) ;
};
class NodeList {
public:
    NodeList();
    virtual v8::Handle<v8::Value> /*::dom::Node*/  item( unsigned long index) ;
    const  unsigned long length;
};
class NamedNodeMap {
public:
    NamedNodeMap();
    virtual v8::Handle<v8::Value> /*::dom::Node*/  getNamedItem( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  setNamedItem(  v8::Handle<v8::Value> /*::dom::Node*/  arg) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  removeNamedItem( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  item( unsigned long index) ;
    const  unsigned long length;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  getNamedItemNS( std::string namespaceURI,  std::string localName) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  setNamedItemNS(  v8::Handle<v8::Value> /*::dom::Node*/  arg) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  removeNamedItemNS( std::string namespaceURI,  std::string localName) ;
};
class CharacterData : public virtual dom::Node  {
public:
    CharacterData();
    std::string data;
    const  unsigned long length;
    virtual std::string substringData( unsigned long offset,  unsigned long count) ;
    virtual void appendData( std::string arg) ;
    virtual void insertData( unsigned long offset,  std::string arg) ;
    virtual void deleteData( unsigned long offset,  unsigned long count) ;
    virtual void replaceData( unsigned long offset,  unsigned long count,  std::string arg) ;
};
class Attr : public virtual dom::Node  {
public:
    Attr();
    const  std::string name;
    const  bool specified;
    std::string value;
    const   v8::Handle<v8::Value> /*::dom::Element*/  ownerElement;
};
class Element : public virtual dom::Node  {
public:
    Element();
    const  std::string tagName;
    virtual std::string getAttribute( std::string name) ;
    virtual void setAttribute( std::string name,  std::string value) ;
    virtual void removeAttribute( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  getAttributeNode( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  setAttributeNode(  v8::Handle<v8::Value> /*::dom::Attr*/  newAttr) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  removeAttributeNode(  v8::Handle<v8::Value> /*::dom::Attr*/  oldAttr) ;
    virtual v8::Handle<v8::Value> /*::dom::NodeList*/  getElementsByTagName( std::string name) ;
    virtual std::string getAttributeNS( std::string namespaceURI,  std::string localName) ;
    virtual void setAttributeNS( std::string namespaceURI,  std::string qualifiedName,  std::string value) ;
    virtual void removeAttributeNS( std::string namespaceURI,  std::string localName) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  getAttributeNodeNS( std::string namespaceURI,  std::string localName) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  setAttributeNodeNS(  v8::Handle<v8::Value> /*::dom::Attr*/  newAttr) ;
    virtual v8::Handle<v8::Value> /*::dom::NodeList*/  getElementsByTagNameNS( std::string namespaceURI,  std::string localName) ;
    virtual bool hasAttribute( std::string name) ;
    virtual bool hasAttributeNS( std::string namespaceURI,  std::string localName) ;
};
class Text : public virtual dom::CharacterData  {
public:
    Text();
    virtual v8::Handle<v8::Value> /*::dom::Text*/  splitText( unsigned long offset) ;
};
class Comment : public virtual dom::CharacterData  {
public:
    Comment();
};
class CDATASection : public virtual dom::Text  {
public:
    CDATASection();
};
class DocumentType : public virtual dom::Node  {
public:
    DocumentType();
    const  std::string name;
    const   v8::Handle<v8::Value> /*::dom::NamedNodeMap*/  entities;
    const   v8::Handle<v8::Value> /*::dom::NamedNodeMap*/  notations;
    const  std::string publicId;
    const  std::string systemId;
    const  std::string internalSubset;
};
class Notation : public virtual dom::Node  {
public:
    Notation();
    const  std::string publicId;
    const  std::string systemId;
};
class Entity : public virtual dom::Node  {
public:
    Entity();
    const  std::string publicId;
    const  std::string systemId;
    const  std::string notationName;
};
class EntityReference : public virtual dom::Node  {
public:
    EntityReference();
};
class ProcessingInstruction : public virtual dom::Node  {
public:
    ProcessingInstruction();
    const  std::string target;
    std::string data;
};
class DocumentFragment : public virtual dom::Node  {
public:
    DocumentFragment();
};
class Document : public virtual dom::Node  {
public:
    Document();
    const   v8::Handle<v8::Value> /*::dom::DocumentType*/  doctype;
    const   v8::Handle<v8::Value> /*::dom::DOMImplementation*/  implementation;
    const   v8::Handle<v8::Value> /*::dom::Element*/  documentElement;
    virtual v8::Handle<v8::Value> /*::dom::Element*/  createElement( std::string tagName) ;
    virtual v8::Handle<v8::Value> /*::dom::DocumentFragment*/  createDocumentFragment() ;
    virtual v8::Handle<v8::Value> /*::dom::Text*/  createTextNode( std::string data) ;
    virtual v8::Handle<v8::Value> /*::dom::Comment*/  createComment( std::string data) ;
    virtual v8::Handle<v8::Value> /*::dom::CDATASection*/  createCDATASection( std::string data) ;
    virtual v8::Handle<v8::Value> /*::dom::ProcessingInstruction*/  createProcessingInstruction( std::string target,  std::string data) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  createAttribute( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::EntityReference*/  createEntityReference( std::string name) ;
    virtual v8::Handle<v8::Value> /*::dom::NodeList*/  getElementsByTagName( std::string tagname) ;
    virtual v8::Handle<v8::Value> /*::dom::Node*/  importNode(  v8::Handle<v8::Value> /*::dom::Node*/  importedNode,  bool deep) ;
    virtual v8::Handle<v8::Value> /*::dom::Element*/  createElementNS( std::string namespaceURI,  std::string qualifiedName) ;
    virtual v8::Handle<v8::Value> /*::dom::Attr*/  createAttributeNS( std::string namespaceURI,  std::string qualifiedName) ;
    virtual v8::Handle<v8::Value> /*::dom::NodeList*/  getElementsByTagNameNS( std::string namespaceURI,  std::string localName) ;
    virtual v8::Handle<v8::Value> /*::dom::Element*/  getElementById( std::string elementId) ;
};
};
namespace stylesheets {
typedef std::string DOMString;
typedef ::dom::Node Node;
class MediaList;
class StyleSheet {
public:
    StyleSheet();
    const  ::stylesheets::DOMString type;
    bool disabled;
    const   v8::Handle<v8::Value> /*::stylesheets::Node*/  ownerNode;
    const   v8::Handle<v8::Value> /*::stylesheets::StyleSheet*/  parentStyleSheet;
    const  ::stylesheets::DOMString href;
    const  ::stylesheets::DOMString title;
    const   v8::Handle<v8::Value> /*::stylesheets::MediaList*/  media;
};
class StyleSheetList {
public:
    StyleSheetList();
    const  unsigned long length;
    virtual v8::Handle<v8::Value> /*::stylesheets::StyleSheet*/  item( unsigned long index) ;
};
class MediaList {
public:
    MediaList();
    ::stylesheets::DOMString mediaText;
    const  unsigned long length;
    virtual ::stylesheets::DOMString item( unsigned long index) ;
    virtual void deleteMedium( ::stylesheets::DOMString oldMedium) ;
    virtual void appendMedium( ::stylesheets::DOMString newMedium) ;
};
class LinkStyle {
public:
    LinkStyle();
    const   v8::Handle<v8::Value> /*::stylesheets::StyleSheet*/  sheet;
};
class DocumentStyle {
public:
    DocumentStyle();
    const   v8::Handle<v8::Value> /*::stylesheets::StyleSheetList*/  styleSheets;
};
};
namespace views {
class DocumentView;
class AbstractView {
public:
    AbstractView();
    const   v8::Handle<v8::Value> /*::views::DocumentView*/  document;
};
class DocumentView {
public:
    DocumentView();
    const   v8::Handle<v8::Value> /*::views::AbstractView*/  defaultView;
};
};
namespace css {
typedef std::string DOMString;
typedef ::dom::Element Element;
typedef ::dom::DOMImplementation DOMImplementation;
class CSSRule;
class CSSStyleSheet;
class CSSStyleDeclaration;
class CSSValue;
class Counter;
class Rect;
class RGBColor;
class CSSRuleList {
public:
    CSSRuleList();
    const  unsigned long length;
    virtual v8::Handle<v8::Value> /*::css::CSSRule*/  item( unsigned long index) ;
};
class CSSRule {
public:
    CSSRule();
    enum  {
        UNKNOWN_RULE = 0,
        STYLE_RULE = 1,
        CHARSET_RULE = 2,
        IMPORT_RULE = 3,
        MEDIA_RULE = 4,
        FONT_FACE_RULE = 5,
        PAGE_RULE = 6,
    };
    const  unsigned short type;
    ::css::DOMString cssText;
    const   v8::Handle<v8::Value> /*::css::CSSStyleSheet*/  parentStyleSheet;
    const   v8::Handle<v8::Value> /*::css::CSSRule*/  parentRule;
};
class CSSStyleRule : public virtual css::CSSRule  {
public:
    CSSStyleRule();
    ::css::DOMString selectorText;
    const   v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  style;
};
class CSSMediaRule : public virtual css::CSSRule  {
public:
    CSSMediaRule();
    const   v8::Handle<v8::Value> /*::stylesheets::MediaList*/  media;
    const   v8::Handle<v8::Value> /*::css::CSSRuleList*/  cssRules;
    virtual unsigned long insertRule( ::css::DOMString rule,  unsigned long index) ;
    virtual void deleteRule( unsigned long index) ;
};
class CSSFontFaceRule : public virtual css::CSSRule  {
public:
    CSSFontFaceRule();
    const   v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  style;
};
class CSSPageRule : public virtual css::CSSRule  {
public:
    CSSPageRule();
    ::css::DOMString selectorText;
    const   v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  style;
};
class CSSImportRule : public virtual css::CSSRule  {
public:
    CSSImportRule();
    const  ::css::DOMString href;
    const   v8::Handle<v8::Value> /*::stylesheets::MediaList*/  media;
    const   v8::Handle<v8::Value> /*::css::CSSStyleSheet*/  styleSheet;
};
class CSSCharsetRule : public virtual css::CSSRule  {
public:
    CSSCharsetRule();
    ::css::DOMString encoding;
};
class CSSUnknownRule : public virtual css::CSSRule  {
public:
    CSSUnknownRule();
};
class CSSStyleDeclaration {
public:
    CSSStyleDeclaration();
    ::css::DOMString cssText;
    virtual ::css::DOMString getPropertyValue( ::css::DOMString propertyName) ;
    virtual v8::Handle<v8::Value> /*::css::CSSValue*/  getPropertyCSSValue( ::css::DOMString propertyName) ;
    virtual ::css::DOMString removeProperty( ::css::DOMString propertyName) ;
    virtual ::css::DOMString getPropertyPriority( ::css::DOMString propertyName) ;
    virtual void setProperty( ::css::DOMString propertyName,  ::css::DOMString value,  ::css::DOMString priority) ;
    const  unsigned long length;
    virtual ::css::DOMString item( unsigned long index) ;
    const   v8::Handle<v8::Value> /*::css::CSSRule*/  parentRule;
};
class CSSValue {
public:
    CSSValue();
    enum  {
        CSS_INHERIT = 0,
        CSS_PRIMITIVE_VALUE = 1,
        CSS_VALUE_LIST = 2,
        CSS_CUSTOM = 3,
    };
    ::css::DOMString cssText;
    const  unsigned short cssValueType;
};
class CSSPrimitiveValue : public virtual css::CSSValue  {
public:
    CSSPrimitiveValue();
    enum  {
        CSS_UNKNOWN = 0,
        CSS_NUMBER = 1,
        CSS_PERCENTAGE = 2,
        CSS_EMS = 3,
        CSS_EXS = 4,
        CSS_PX = 5,
        CSS_CM = 6,
        CSS_MM = 7,
        CSS_IN = 8,
        CSS_PT = 9,
        CSS_PC = 10,
        CSS_DEG = 11,
        CSS_RAD = 12,
        CSS_GRAD = 13,
        CSS_MS = 14,
        CSS_S = 15,
        CSS_HZ = 16,
        CSS_KHZ = 17,
        CSS_DIMENSION = 18,
        CSS_STRING = 19,
        CSS_URI = 20,
        CSS_IDENT = 21,
        CSS_ATTR = 22,
        CSS_COUNTER = 23,
        CSS_RECT = 24,
        CSS_RGBCOLOR = 25,
    };
    const  unsigned short primitiveType;
    virtual void setFloatValue( unsigned short unitType,  double floatValue) ;
    virtual double getFloatValue( unsigned short unitType) ;
    virtual void setStringValue( unsigned short stringType,  ::css::DOMString stringValue) ;
    virtual ::css::DOMString getStringValue() ;
    virtual v8::Handle<v8::Value> /*::css::Counter*/  getCounterValue() ;
    virtual v8::Handle<v8::Value> /*::css::Rect*/  getRectValue() ;
    virtual v8::Handle<v8::Value> /*::css::RGBColor*/  getRGBColorValue() ;
};
class CSSValueList : public virtual css::CSSValue  {
public:
    CSSValueList();
    const  unsigned long length;
    virtual v8::Handle<v8::Value> /*::css::CSSValue*/  item( unsigned long index) ;
};
class RGBColor {
public:
    RGBColor();
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  red;
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  green;
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  blue;
};
class Rect {
public:
    Rect();
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  top;
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  right;
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  bottom;
    const   v8::Handle<v8::Value> /*::css::CSSPrimitiveValue*/  left;
};
class Counter {
public:
    Counter();
    const  ::css::DOMString identifier;
    const  ::css::DOMString listStyle;
    const  ::css::DOMString separator;
};
class ElementCSSInlineStyle {
public:
    ElementCSSInlineStyle();
    const   v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  style;
};
class CSS2Properties {
public:
    CSS2Properties();
    ::css::DOMString azimuth;
    ::css::DOMString background;
    ::css::DOMString backgroundAttachment;
    ::css::DOMString backgroundColor;
    ::css::DOMString backgroundImage;
    ::css::DOMString backgroundPosition;
    ::css::DOMString backgroundRepeat;
    ::css::DOMString border;
    ::css::DOMString borderCollapse;
    ::css::DOMString borderColor;
    ::css::DOMString borderSpacing;
    ::css::DOMString borderStyle;
    ::css::DOMString borderTop;
    ::css::DOMString borderRight;
    ::css::DOMString borderBottom;
    ::css::DOMString borderLeft;
    ::css::DOMString borderTopColor;
    ::css::DOMString borderRightColor;
    ::css::DOMString borderBottomColor;
    ::css::DOMString borderLeftColor;
    ::css::DOMString borderTopStyle;
    ::css::DOMString borderRightStyle;
    ::css::DOMString borderBottomStyle;
    ::css::DOMString borderLeftStyle;
    ::css::DOMString borderTopWidth;
    ::css::DOMString borderRightWidth;
    ::css::DOMString borderBottomWidth;
    ::css::DOMString borderLeftWidth;
    ::css::DOMString borderWidth;
    ::css::DOMString bottom;
    ::css::DOMString captionSide;
    ::css::DOMString clear;
    ::css::DOMString clip;
    ::css::DOMString color;
    ::css::DOMString content;
    ::css::DOMString counterIncrement;
    ::css::DOMString counterReset;
    ::css::DOMString cue;
    ::css::DOMString cueAfter;
    ::css::DOMString cueBefore;
    ::css::DOMString cursor;
    ::css::DOMString direction;
    ::css::DOMString display;
    ::css::DOMString elevation;
    ::css::DOMString emptyCells;
    ::css::DOMString cssFloat;
    ::css::DOMString font;
    ::css::DOMString fontFamily;
    ::css::DOMString fontSize;
    ::css::DOMString fontSizeAdjust;
    ::css::DOMString fontStretch;
    ::css::DOMString fontStyle;
    ::css::DOMString fontVariant;
    ::css::DOMString fontWeight;
    ::css::DOMString height;
    ::css::DOMString left;
    ::css::DOMString letterSpacing;
    ::css::DOMString lineHeight;
    ::css::DOMString listStyle;
    ::css::DOMString listStyleImage;
    ::css::DOMString listStylePosition;
    ::css::DOMString listStyleType;
    ::css::DOMString margin;
    ::css::DOMString marginTop;
    ::css::DOMString marginRight;
    ::css::DOMString marginBottom;
    ::css::DOMString marginLeft;
    ::css::DOMString markerOffset;
    ::css::DOMString marks;
    ::css::DOMString maxHeight;
    ::css::DOMString maxWidth;
    ::css::DOMString minHeight;
    ::css::DOMString minWidth;
    ::css::DOMString orphans;
    ::css::DOMString outline;
    ::css::DOMString outlineColor;
    ::css::DOMString outlineStyle;
    ::css::DOMString outlineWidth;
    ::css::DOMString overflow;
    ::css::DOMString padding;
    ::css::DOMString paddingTop;
    ::css::DOMString paddingRight;
    ::css::DOMString paddingBottom;
    ::css::DOMString paddingLeft;
    ::css::DOMString page;
    ::css::DOMString pageBreakAfter;
    ::css::DOMString pageBreakBefore;
    ::css::DOMString pageBreakInside;
    ::css::DOMString pause;
    ::css::DOMString pauseAfter;
    ::css::DOMString pauseBefore;
    ::css::DOMString pitch;
    ::css::DOMString pitchRange;
    ::css::DOMString playDuring;
    ::css::DOMString position;
    ::css::DOMString quotes;
    ::css::DOMString richness;
    ::css::DOMString right;
    ::css::DOMString size;
    ::css::DOMString speak;
    ::css::DOMString speakHeader;
    ::css::DOMString speakNumeral;
    ::css::DOMString speakPunctuation;
    ::css::DOMString speechRate;
    ::css::DOMString stress;
    ::css::DOMString tableLayout;
    ::css::DOMString textAlign;
    ::css::DOMString textDecoration;
    ::css::DOMString textIndent;
    ::css::DOMString textShadow;
    ::css::DOMString textTransform;
    ::css::DOMString top;
    ::css::DOMString unicodeBidi;
    ::css::DOMString verticalAlign;
    ::css::DOMString visibility;
    ::css::DOMString voiceFamily;
    ::css::DOMString volume;
    ::css::DOMString whiteSpace;
    ::css::DOMString widows;
    ::css::DOMString width;
    ::css::DOMString wordSpacing;
    ::css::DOMString zIndex;
};
class CSSStyleSheet : public virtual stylesheets::StyleSheet  {
public:
    CSSStyleSheet();
    const   v8::Handle<v8::Value> /*::css::CSSRule*/  ownerRule;
    const   v8::Handle<v8::Value> /*::css::CSSRuleList*/  cssRules;
    virtual unsigned long insertRule( ::css::DOMString rule,  unsigned long index) ;
    virtual void deleteRule( unsigned long index) ;
};
class ViewCSS : public virtual views::AbstractView  {
public:
    ViewCSS();
    virtual v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  getComputedStyle(  v8::Handle<v8::Value> /*::css::Element*/  elt,  ::css::DOMString pseudoElt) ;
};
class DocumentCSS : public virtual stylesheets::DocumentStyle  {
public:
    DocumentCSS();
    virtual v8::Handle<v8::Value> /*::css::CSSStyleDeclaration*/  getOverrideStyle(  v8::Handle<v8::Value> /*::css::Element*/  elt,  ::css::DOMString pseudoElt) ;
};
class DOMImplementationCSS : public virtual css::DOMImplementation  {
public:
    DOMImplementationCSS();
    virtual v8::Handle<v8::Value> /*::css::CSSStyleSheet*/  createCSSStyleSheet( ::css::DOMString title,  ::css::DOMString media) ;
};
};
namespace events {
typedef std::string DOMString;
typedef ::dom::DOMTimeStamp DOMTimeStamp;
typedef ::dom::Node Node;
class EventListener;
class Event;
class EventException {
public:
    EventException();
    unsigned short code;
};
enum  {
    UNSPECIFIED_EVENT_TYPE_ERR = 0,
};
class EventTarget {
public:
    EventTarget();
    virtual void addEventListener( ::events::DOMString type,   v8::Handle<v8::Value> /*::events::EventListener*/  listener,  bool useCapture) ;
    virtual void removeEventListener( ::events::DOMString type,   v8::Handle<v8::Value> /*::events::EventListener*/  listener,  bool useCapture) ;
    virtual bool dispatchEvent(  v8::Handle<v8::Value> /*::events::Event*/  evt) ;
};
class EventListener {
public:
    EventListener();
    virtual void handleEvent(  v8::Handle<v8::Value> /*::events::Event*/  evt) ;
};
class Event {
public:
    Event();
    enum  {
        CAPTURING_PHASE = 1,
        AT_TARGET = 2,
        BUBBLING_PHASE = 3,
    };
    const  ::events::DOMString type;
    const   v8::Handle<v8::Value> /*::events::EventTarget*/  target;
    const   v8::Handle<v8::Value> /*::events::EventTarget*/  currentTarget;
    const  unsigned short eventPhase;
    const  bool bubbles;
    const  bool cancelable;
    const   v8::Handle<v8::Value> /*::events::DOMTimeStamp*/  timeStamp;
    virtual void stopPropagation() ;
    virtual void preventDefault() ;
    virtual void initEvent( ::events::DOMString eventTypeArg,  bool canBubbleArg,  bool cancelableArg) ;
};
class DocumentEvent {
public:
    DocumentEvent();
    virtual v8::Handle<v8::Value> /*::events::Event*/  createEvent( ::events::DOMString eventType) ;
};
class UIEvent : public virtual events::Event  {
public:
    UIEvent();
    const   v8::Handle<v8::Value> /*::views::AbstractView*/  view;
    const  long detail;
    virtual void initUIEvent( ::events::DOMString typeArg,  bool canBubbleArg,  bool cancelableArg,   v8::Handle<v8::Value> /*::views::AbstractView*/  viewArg,  long detailArg) ;
};
class MouseEvent : public virtual events::UIEvent  {
public:
    MouseEvent();
    const  long screenX;
    const  long screenY;
    const  long clientX;
    const  long clientY;
    const  bool ctrlKey;
    const  bool shiftKey;
    const  bool altKey;
    const  bool metaKey;
    const  unsigned short button;
    const   v8::Handle<v8::Value> /*::events::EventTarget*/  relatedTarget;
    virtual void initMouseEvent( ::events::DOMString typeArg,  bool canBubbleArg,  bool cancelableArg,   v8::Handle<v8::Value> /*::views::AbstractView*/  viewArg,  long detailArg,  long screenXArg,  long screenYArg,  long clientXArg,  long clientYArg,  bool ctrlKeyArg,  bool altKeyArg,  bool shiftKeyArg,  bool metaKeyArg,  unsigned short buttonArg,   v8::Handle<v8::Value> /*::events::EventTarget*/  relatedTargetArg) ;
};
class MutationEvent : public virtual events::Event  {
public:
    MutationEvent();
    enum  {
        MODIFICATION = 1,
        ADDITION = 2,
        REMOVAL = 3,
    };
    const   v8::Handle<v8::Value> /*::events::Node*/  relatedNode;
    const  ::events::DOMString prevValue;
    const  ::events::DOMString newValue;
    const  ::events::DOMString attrName;
    const  unsigned short attrChange;
    virtual void initMutationEvent( ::events::DOMString typeArg,  bool canBubbleArg,  bool cancelableArg,   v8::Handle<v8::Value> /*::events::Node*/  relatedNodeArg,  ::events::DOMString prevValueArg,  ::events::DOMString newValueArg,  ::events::DOMString attrNameArg,  unsigned short attrChangeArg) ;
};
};
namespace html2 {
typedef std::string DOMString;
typedef ::dom::Node Node;
typedef ::dom::Document Document;
typedef ::dom::NodeList NodeList;
typedef ::dom::Element Element;
class HTMLElement;
class HTMLFormElement;
class HTMLTableCaptionElement;
class HTMLTableSectionElement;
class HTMLCollection {
public:
    HTMLCollection();
    const  unsigned long length;
    virtual v8::Handle<v8::Value> /*::html2::Node*/  item( unsigned long index) ;
    virtual v8::Handle<v8::Value> /*::html2::Node*/  namedItem( ::html2::DOMString name) ;
};
class HTMLOptionsCollection {
public:
    HTMLOptionsCollection();
    unsigned long length;
    virtual v8::Handle<v8::Value> /*::html2::Node*/  item( unsigned long index) ;
    virtual v8::Handle<v8::Value> /*::html2::Node*/  namedItem( ::html2::DOMString name) ;
};
class HTMLDocument : public virtual html2::Document  {
public:
    HTMLDocument();
    ::html2::DOMString title;
    const  ::html2::DOMString referrer;
    const  ::html2::DOMString domain;
    const  ::html2::DOMString URL;
    v8::Handle<v8::Value> /*::html2::HTMLElement*/  body;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  images;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  applets;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  links;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  forms;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  anchors;
    ::html2::DOMString cookie;
    ::html2::DOMString innerHTML;
    virtual void open() ;
    virtual void close() ;
    virtual void write( ::html2::DOMString text) ;
    virtual void writeln( ::html2::DOMString text) ;
    virtual v8::Handle<v8::Value> /*::html2::NodeList*/  getElementsByName( ::html2::DOMString elementName) ;
};
class HTMLElement : public virtual html2::Element  {
public:
    HTMLElement();
    ::html2::DOMString id;
    ::html2::DOMString title;
    ::html2::DOMString lang;
    ::html2::DOMString dir;
    ::html2::DOMString className;
    v8::Handle<v8::Value> /*::css::CSS2Properties*/  style;
    ::html2::DOMString innerHTML;
};
class HTMLHtmlElement : public virtual html2::HTMLElement  {
public:
    HTMLHtmlElement();
    ::html2::DOMString version;
};
class HTMLHeadElement : public virtual html2::HTMLElement  {
public:
    HTMLHeadElement();
    ::html2::DOMString profile;
};
class HTMLLinkElement : public virtual html2::HTMLElement  {
public:
    HTMLLinkElement();
    bool disabled;
    ::html2::DOMString charset;
    ::html2::DOMString href;
    ::html2::DOMString hreflang;
    ::html2::DOMString media;
    ::html2::DOMString rel;
    ::html2::DOMString rev;
    ::html2::DOMString target;
    ::html2::DOMString type;
};
class HTMLTitleElement : public virtual html2::HTMLElement  {
public:
    HTMLTitleElement();
    ::html2::DOMString text;
};
class HTMLMetaElement : public virtual html2::HTMLElement  {
public:
    HTMLMetaElement();
    ::html2::DOMString content;
    ::html2::DOMString httpEquiv;
    ::html2::DOMString name;
    ::html2::DOMString scheme;
};
class HTMLBaseElement : public virtual html2::HTMLElement  {
public:
    HTMLBaseElement();
    ::html2::DOMString href;
    ::html2::DOMString target;
};
class HTMLIsIndexElement : public virtual html2::HTMLElement  {
public:
    HTMLIsIndexElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString prompt;
};
class HTMLStyleElement : public virtual html2::HTMLElement  {
public:
    HTMLStyleElement();
    bool disabled;
    ::html2::DOMString media;
    ::html2::DOMString type;
};
class HTMLBodyElement : public virtual html2::HTMLElement  {
public:
    HTMLBodyElement();
    ::html2::DOMString aLink;
    ::html2::DOMString background;
    ::html2::DOMString bgColor;
    ::html2::DOMString link;
    ::html2::DOMString text;
    ::html2::DOMString vLink;
};
class HTMLFormElement : public virtual html2::HTMLElement  {
public:
    HTMLFormElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  elements;
    const  long length;
    ::html2::DOMString name;
    ::html2::DOMString acceptCharset;
    ::html2::DOMString action;
    ::html2::DOMString enctype;
    ::html2::DOMString method;
    ::html2::DOMString target;
    virtual void submit() ;
    virtual void reset() ;
};
class HTMLSelectElement : public virtual html2::HTMLElement  {
public:
    HTMLSelectElement();
    const  ::html2::DOMString type;
    long selectedIndex;
    ::html2::DOMString value;
    unsigned long length;
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    const   v8::Handle<v8::Value> /*::html2::HTMLOptionsCollection*/  options;
    bool disabled;
    bool multiple;
    ::html2::DOMString name;
    long size;
    long tabIndex;
    virtual void add(  v8::Handle<v8::Value> /*::html2::HTMLElement*/  element,   v8::Handle<v8::Value> /*::html2::HTMLElement*/  before) ;
    virtual void remove( long index) ;
    virtual void blur() ;
    virtual void focus() ;
};
class HTMLOptGroupElement : public virtual html2::HTMLElement  {
public:
    HTMLOptGroupElement();
    bool disabled;
    ::html2::DOMString label;
};
class HTMLOptionElement : public virtual html2::HTMLElement  {
public:
    HTMLOptionElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    bool defaultSelected;
    const  ::html2::DOMString text;
    const  long index;
    bool disabled;
    ::html2::DOMString label;
    bool selected;
    ::html2::DOMString value;
};
class HTMLInputElement : public virtual html2::HTMLElement  {
public:
    HTMLInputElement();
    ::html2::DOMString defaultValue;
    bool defaultChecked;
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString accept;
    ::html2::DOMString accessKey;
    ::html2::DOMString align;
    ::html2::DOMString alt;
    bool checked;
    bool disabled;
    long maxLength;
    ::html2::DOMString name;
    bool readOnly;
    unsigned long size;
    ::html2::DOMString src;
    long tabIndex;
    ::html2::DOMString type;
    ::html2::DOMString useMap;
    ::html2::DOMString value;
    virtual void blur() ;
    virtual void focus() ;
    virtual void select() ;
    virtual void click() ;
};
class HTMLTextAreaElement : public virtual html2::HTMLElement  {
public:
    HTMLTextAreaElement();
    ::html2::DOMString defaultValue;
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString accessKey;
    long cols;
    bool disabled;
    ::html2::DOMString name;
    bool readOnly;
    long rows;
    long tabIndex;
    const  ::html2::DOMString type;
    ::html2::DOMString value;
    virtual void blur() ;
    virtual void focus() ;
    virtual void select() ;
};
class HTMLButtonElement : public virtual html2::HTMLElement  {
public:
    HTMLButtonElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString accessKey;
    bool disabled;
    ::html2::DOMString name;
    long tabIndex;
    const  ::html2::DOMString type;
    ::html2::DOMString value;
};
class HTMLLabelElement : public virtual html2::HTMLElement  {
public:
    HTMLLabelElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString accessKey;
    ::html2::DOMString htmlFor;
};
class HTMLFieldSetElement : public virtual html2::HTMLElement  {
public:
    HTMLFieldSetElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
};
class HTMLLegendElement : public virtual html2::HTMLElement  {
public:
    HTMLLegendElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString accessKey;
    ::html2::DOMString align;
};
class HTMLUListElement : public virtual html2::HTMLElement  {
public:
    HTMLUListElement();
    bool compact;
    ::html2::DOMString type;
};
class HTMLOListElement : public virtual html2::HTMLElement  {
public:
    HTMLOListElement();
    bool compact;
    long start;
    ::html2::DOMString type;
};
class HTMLDListElement : public virtual html2::HTMLElement  {
public:
    HTMLDListElement();
    bool compact;
};
class HTMLDirectoryElement : public virtual html2::HTMLElement  {
public:
    HTMLDirectoryElement();
    bool compact;
};
class HTMLMenuElement : public virtual html2::HTMLElement  {
public:
    HTMLMenuElement();
    bool compact;
};
class HTMLLIElement : public virtual html2::HTMLElement  {
public:
    HTMLLIElement();
    ::html2::DOMString type;
    long value;
};
class HTMLDivElement : public virtual html2::HTMLElement  {
public:
    HTMLDivElement();
    ::html2::DOMString align;
};
class HTMLParagraphElement : public virtual html2::HTMLElement  {
public:
    HTMLParagraphElement();
    ::html2::DOMString align;
};
class HTMLHeadingElement : public virtual html2::HTMLElement  {
public:
    HTMLHeadingElement();
    ::html2::DOMString align;
};
class HTMLQuoteElement : public virtual html2::HTMLElement  {
public:
    HTMLQuoteElement();
    ::html2::DOMString cite;
};
class HTMLPreElement : public virtual html2::HTMLElement  {
public:
    HTMLPreElement();
    long width;
};
class HTMLBRElement : public virtual html2::HTMLElement  {
public:
    HTMLBRElement();
    ::html2::DOMString clear;
};
class HTMLBaseFontElement : public virtual html2::HTMLElement  {
public:
    HTMLBaseFontElement();
    ::html2::DOMString color;
    ::html2::DOMString face;
    long size;
};
class HTMLFontElement : public virtual html2::HTMLElement  {
public:
    HTMLFontElement();
    ::html2::DOMString color;
    ::html2::DOMString face;
    ::html2::DOMString size;
};
class HTMLHRElement : public virtual html2::HTMLElement  {
public:
    HTMLHRElement();
    ::html2::DOMString align;
    bool noShade;
    ::html2::DOMString size;
    ::html2::DOMString width;
};
class HTMLModElement : public virtual html2::HTMLElement  {
public:
    HTMLModElement();
    ::html2::DOMString cite;
    ::html2::DOMString dateTime;
};
class HTMLAnchorElement : public virtual html2::HTMLElement  {
public:
    HTMLAnchorElement();
    ::html2::DOMString accessKey;
    ::html2::DOMString charset;
    ::html2::DOMString coords;
    ::html2::DOMString href;
    ::html2::DOMString hreflang;
    ::html2::DOMString name;
    ::html2::DOMString rel;
    ::html2::DOMString rev;
    ::html2::DOMString shape;
    long tabIndex;
    ::html2::DOMString target;
    ::html2::DOMString type;
    virtual void blur() ;
    virtual void focus() ;
};
class HTMLImageElement : public virtual html2::HTMLElement  {
public:
    HTMLImageElement();
    ::html2::DOMString name;
    ::html2::DOMString align;
    ::html2::DOMString alt;
    ::html2::DOMString border;
    long height;
    long hspace;
    bool isMap;
    ::html2::DOMString longDesc;
    ::html2::DOMString src;
    ::html2::DOMString useMap;
    long vspace;
    long width;
};
class HTMLObjectElement : public virtual html2::HTMLElement  {
public:
    HTMLObjectElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLFormElement*/  form;
    ::html2::DOMString code;
    ::html2::DOMString align;
    ::html2::DOMString archive;
    ::html2::DOMString border;
    ::html2::DOMString codeBase;
    ::html2::DOMString codeType;
    ::html2::DOMString data;
    bool declare;
    ::html2::DOMString height;
    long hspace;
    ::html2::DOMString name;
    ::html2::DOMString standby;
    long tabIndex;
    ::html2::DOMString type;
    ::html2::DOMString useMap;
    long vspace;
    ::html2::DOMString width;
    const   v8::Handle<v8::Value> /*::html2::Document*/  contentDocument;
};
class HTMLParamElement : public virtual html2::HTMLElement  {
public:
    HTMLParamElement();
    ::html2::DOMString name;
    ::html2::DOMString type;
    ::html2::DOMString value;
    ::html2::DOMString valueType;
};
class HTMLAppletElement : public virtual html2::HTMLElement  {
public:
    HTMLAppletElement();
    ::html2::DOMString align;
    ::html2::DOMString alt;
    ::html2::DOMString archive;
    ::html2::DOMString code;
    ::html2::DOMString codeBase;
    ::html2::DOMString height;
    long hspace;
    ::html2::DOMString name;
    ::html2::DOMString object;
    long vspace;
    ::html2::DOMString width;
};
class HTMLMapElement : public virtual html2::HTMLElement  {
public:
    HTMLMapElement();
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  areas;
    ::html2::DOMString name;
};
class HTMLAreaElement : public virtual html2::HTMLElement  {
public:
    HTMLAreaElement();
    ::html2::DOMString accessKey;
    ::html2::DOMString alt;
    ::html2::DOMString coords;
    ::html2::DOMString href;
    bool noHref;
    ::html2::DOMString shape;
    long tabIndex;
    ::html2::DOMString target;
};
class HTMLScriptElement : public virtual html2::HTMLElement  {
public:
    HTMLScriptElement();
    ::html2::DOMString text;
    ::html2::DOMString htmlFor;
    ::html2::DOMString event;
    ::html2::DOMString charset;
    bool defer;
    ::html2::DOMString src;
    ::html2::DOMString type;
};
class HTMLTableElement : public virtual html2::HTMLElement  {
public:
    HTMLTableElement();
    v8::Handle<v8::Value> /*::html2::HTMLTableCaptionElement*/  caption;
    v8::Handle<v8::Value> /*::html2::HTMLTableSectionElement*/  tHead;
    v8::Handle<v8::Value> /*::html2::HTMLTableSectionElement*/  tFoot;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  rows;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  tBodies;
    ::html2::DOMString align;
    ::html2::DOMString bgColor;
    ::html2::DOMString border;
    ::html2::DOMString cellPadding;
    ::html2::DOMString cellSpacing;
    ::html2::DOMString frame;
    ::html2::DOMString rules;
    ::html2::DOMString summary;
    ::html2::DOMString width;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  createTHead() ;
    virtual void deleteTHead() ;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  createTFoot() ;
    virtual void deleteTFoot() ;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  createCaption() ;
    virtual void deleteCaption() ;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  insertRow( long index) ;
    virtual void deleteRow( long index) ;
};
class HTMLTableCaptionElement : public virtual html2::HTMLElement  {
public:
    HTMLTableCaptionElement();
    ::html2::DOMString align;
};
class HTMLTableColElement : public virtual html2::HTMLElement  {
public:
    HTMLTableColElement();
    ::html2::DOMString align;
    ::html2::DOMString ch;
    ::html2::DOMString chOff;
    long span;
    ::html2::DOMString vAlign;
    ::html2::DOMString width;
};
class HTMLTableSectionElement : public virtual html2::HTMLElement  {
public:
    HTMLTableSectionElement();
    ::html2::DOMString align;
    ::html2::DOMString ch;
    ::html2::DOMString chOff;
    ::html2::DOMString vAlign;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  rows;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  insertRow( long index) ;
    virtual void deleteRow( long index) ;
};
class HTMLTableRowElement : public virtual html2::HTMLElement  {
public:
    HTMLTableRowElement();
    const  long rowIndex;
    const  long sectionRowIndex;
    const   v8::Handle<v8::Value> /*::html2::HTMLCollection*/  cells;
    ::html2::DOMString align;
    ::html2::DOMString bgColor;
    ::html2::DOMString ch;
    ::html2::DOMString chOff;
    ::html2::DOMString vAlign;
    virtual v8::Handle<v8::Value> /*::html2::HTMLElement*/  insertCell( long index) ;
    virtual void deleteCell( long index) ;
};
class HTMLTableCellElement : public virtual html2::HTMLElement  {
public:
    HTMLTableCellElement();
    const  long cellIndex;
    ::html2::DOMString abbr;
    ::html2::DOMString align;
    ::html2::DOMString axis;
    ::html2::DOMString bgColor;
    ::html2::DOMString ch;
    ::html2::DOMString chOff;
    long colSpan;
    ::html2::DOMString headers;
    ::html2::DOMString height;
    bool noWrap;
    long rowSpan;
    ::html2::DOMString scope;
    ::html2::DOMString vAlign;
    ::html2::DOMString width;
};
class HTMLFrameSetElement : public virtual html2::HTMLElement  {
public:
    HTMLFrameSetElement();
    ::html2::DOMString cols;
    ::html2::DOMString rows;
};
class HTMLFrameElement : public virtual html2::HTMLElement  {
public:
    HTMLFrameElement();
    ::html2::DOMString frameBorder;
    ::html2::DOMString longDesc;
    ::html2::DOMString marginHeight;
    ::html2::DOMString marginWidth;
    ::html2::DOMString name;
    bool noResize;
    ::html2::DOMString scrolling;
    ::html2::DOMString src;
    const   v8::Handle<v8::Value> /*::html2::Document*/  contentDocument;
};
class HTMLIFrameElement : public virtual html2::HTMLElement  {
public:
    HTMLIFrameElement();
    ::html2::DOMString align;
    ::html2::DOMString frameBorder;
    ::html2::DOMString height;
    ::html2::DOMString longDesc;
    ::html2::DOMString marginHeight;
    ::html2::DOMString marginWidth;
    ::html2::DOMString name;
    ::html2::DOMString scrolling;
    ::html2::DOMString src;
    ::html2::DOMString width;
    const   v8::Handle<v8::Value> /*::html2::Document*/  contentDocument;
};
};
namespace ranges {
typedef ::dom::Node Node;
typedef ::dom::DocumentFragment DocumentFragment;
typedef std::string DOMString;
class RangeException {
public:
    RangeException();
    unsigned short code;
};
enum  {
    BAD_BOUNDARYPOINTS_ERR = 1,
    INVALID_NODE_TYPE_ERR = 2,
};
class Range {
public:
    Range();
    const   v8::Handle<v8::Value> /*::ranges::Node*/  startContainer;
    const  long startOffset;
    const   v8::Handle<v8::Value> /*::ranges::Node*/  endContainer;
    const  long endOffset;
    const  bool collapsed;
    const   v8::Handle<v8::Value> /*::ranges::Node*/  commonAncestorContainer;
    virtual void setStart(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode,  long offset) ;
    virtual void setEnd(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode,  long offset) ;
    virtual void setStartBefore(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    virtual void setStartAfter(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    virtual void setEndBefore(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    virtual void setEndAfter(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    virtual void collapse( bool toStart) ;
    virtual void selectNode(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    virtual void selectNodeContents(  v8::Handle<v8::Value> /*::ranges::Node*/  refNode) ;
    enum  {
        START_TO_START = 0,
        START_TO_END = 1,
        END_TO_END = 2,
        END_TO_START = 3,
    };
    short compareBoundaryPoints( unsigned short how,   v8::Handle<v8::Value> /*::ranges::Range*/  sourceRange) ;
    virtual void deleteContents() ;
    virtual v8::Handle<v8::Value> /*::ranges::DocumentFragment*/  extractContents() ;
    virtual v8::Handle<v8::Value> /*::ranges::DocumentFragment*/  cloneContents() ;
    virtual void insertNode(  v8::Handle<v8::Value> /*::ranges::Node*/  newNode) ;
    virtual void surroundContents(  v8::Handle<v8::Value> /*::ranges::Node*/  newParent) ;
    virtual v8::Handle<v8::Value> /*::ranges::Range*/  cloneRange() ;
    virtual ::ranges::DOMString toString() ;
    virtual void detach() ;
};
class DocumentRange {
public:
    DocumentRange();
    virtual v8::Handle<v8::Value> /*::ranges::Range*/  createRange() ;
};
};
namespace traversal {
typedef ::dom::Node Node;
class NodeFilter;
class NodeIterator {
public:
    NodeIterator();
    const   v8::Handle<v8::Value> /*::traversal::Node*/  root;
    const  unsigned long whatToShow;
    const   v8::Handle<v8::Value> /*::traversal::NodeFilter*/  filter;
    const  bool expandEntityReferences;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  nextNode() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  previousNode() ;
    virtual void detach() ;
};
class NodeFilter {
public:
    NodeFilter();
    enum  {
        FILTER_ACCEPT = 1,
        FILTER_REJECT = 2,
        FILTER_SKIP = 3,
        SHOW_ALL = 4294967295L,
        SHOW_ELEMENT = 1L,
        SHOW_ATTRIBUTE = 2L,
        SHOW_TEXT = 4L,
        SHOW_CDATA_SECTION = 8L,
        SHOW_ENTITY_REFERENCE = 16L,
        SHOW_ENTITY = 32L,
        SHOW_PROCESSING_INSTRUCTION = 64L,
        SHOW_COMMENT = 128L,
        SHOW_DOCUMENT = 256L,
        SHOW_DOCUMENT_TYPE = 512L,
        SHOW_DOCUMENT_FRAGMENT = 1024L,
        SHOW_NOTATION = 2048L,
    };
    short acceptNode(  v8::Handle<v8::Value> /*::traversal::Node*/  n);
};
class TreeWalker {
public:
    TreeWalker();
    const   v8::Handle<v8::Value> /*::traversal::Node*/  root;
    const  unsigned long whatToShow;
    const   v8::Handle<v8::Value> /*::traversal::NodeFilter*/  filter;
    const  bool expandEntityReferences;
    v8::Handle<v8::Value> /*::traversal::Node*/  currentNode;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  parentNode() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  firstChild() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  lastChild() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  previousSibling() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  nextSibling() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  previousNode() ;
    virtual v8::Handle<v8::Value> /*::traversal::Node*/  nextNode() ;
};
class DocumentTraversal {
public:
    DocumentTraversal();
    virtual v8::Handle<v8::Value> /*::traversal::NodeIterator*/  createNodeIterator(  v8::Handle<v8::Value> /*::traversal::Node*/  root,  unsigned long whatToShow,   v8::Handle<v8::Value> /*::traversal::NodeFilter*/  filter,  bool entityReferenceExpansion) ;
    virtual v8::Handle<v8::Value> /*::traversal::TreeWalker*/  createTreeWalker(  v8::Handle<v8::Value> /*::traversal::Node*/  root,  unsigned long whatToShow,   v8::Handle<v8::Value> /*::traversal::NodeFilter*/  filter,  bool entityReferenceExpansion) ;
};
};
#endif

