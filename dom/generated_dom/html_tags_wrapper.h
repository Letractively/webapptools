
/*
  DO NOT EDIT!
  This file has been generated by generate_sources.py script.
  $Id: html_tags_wrapper.h 36434 2010-11-19 12:42:46Z santonov $
*/
#ifndef __tags_header___
#define __tags_header___


template <class T, bool generated>
v8_wrapper::tree_node_ptr inline TreeNodeFromEntity(webEngine::html_entity_ptr objToWrap)
{
    return TreeNodeFromEntity<T, generated>(objToWrap, boost::shared_ptr<T>());
}

template <class T, bool generated>
v8_wrapper::tree_node_ptr TreeNodeFromEntity(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node)
{
    if(!node) {
        node.reset(new T());
        node->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< T >(node.get()));
        //node->m_this.MakeWeak( NULL , v8_wrapper::Registrator< T >::Destructor);
        node->m_tag = objToWrap->HtmlTag();
    }
    return node;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_DOMException, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_DOMException());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_DOMException >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_DOMException >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_DOMException* node = dynamic_cast<js_dom_DOMException*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("code");
        if(attr != objToWrap->attr_list().end()) {
            node->code = boost::lexical_cast< short unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["code"] << "' to short unsigned int");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_DOMImplementation, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_DOMImplementation());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_DOMImplementation >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_DOMImplementation >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_DOMImplementation* node = dynamic_cast<js_dom_DOMImplementation*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Node, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Node());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Node >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Node >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Node* node = dynamic_cast<js_dom_Node*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("nodeValue");
        if(attr != objToWrap->attr_list().end()) {
            node->nodeValue = boost::lexical_cast< std::string > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["nodeValue"] << "' to std::string");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("prefix");
        if(attr != objToWrap->attr_list().end()) {
            node->prefix = boost::lexical_cast< std::string > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["prefix"] << "' to std::string");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_NodeList, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_NodeList());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_NodeList >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_NodeList >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_NodeList* node = dynamic_cast<js_dom_NodeList*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_NamedNodeMap, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_NamedNodeMap());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_NamedNodeMap >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_NamedNodeMap >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_NamedNodeMap* node = dynamic_cast<js_dom_NamedNodeMap*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_CharacterData, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_CharacterData());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_CharacterData >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_CharacterData >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_CharacterData* node = dynamic_cast<js_dom_CharacterData*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("data");
        if(attr != objToWrap->attr_list().end()) {
            node->data = boost::lexical_cast< std::string > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["data"] << "' to std::string");
    }
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Attr, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Attr());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Attr >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Attr >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Attr* node = dynamic_cast<js_dom_Attr*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< std::string > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to std::string");
    }
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Element, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Element());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Element >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Element >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Element* node = dynamic_cast<js_dom_Element*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Text, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Text());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Text >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Text >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Text* node = dynamic_cast<js_dom_Text*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_CharacterData, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Comment, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Comment());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Comment >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Comment >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Comment* node = dynamic_cast<js_dom_Comment*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_CharacterData, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_CDATASection, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_CDATASection());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_CDATASection >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_CDATASection >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_CDATASection* node = dynamic_cast<js_dom_CDATASection*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Text, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_DocumentType, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_DocumentType());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_DocumentType >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_DocumentType >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_DocumentType* node = dynamic_cast<js_dom_DocumentType*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Notation, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Notation());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Notation >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Notation >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Notation* node = dynamic_cast<js_dom_Notation*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Entity, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Entity());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Entity >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Entity >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Entity* node = dynamic_cast<js_dom_Entity*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_EntityReference, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_EntityReference());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_EntityReference >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_EntityReference >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_EntityReference* node = dynamic_cast<js_dom_EntityReference*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_ProcessingInstruction, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_ProcessingInstruction());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_ProcessingInstruction >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_ProcessingInstruction >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_ProcessingInstruction* node = dynamic_cast<js_dom_ProcessingInstruction*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("data");
        if(attr != objToWrap->attr_list().end()) {
            node->data = boost::lexical_cast< std::string > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["data"] << "' to std::string");
    }
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_DocumentFragment, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_DocumentFragment());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_DocumentFragment >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_DocumentFragment >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_DocumentFragment* node = dynamic_cast<js_dom_DocumentFragment*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_dom_Document, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_dom_Document());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_dom_Document >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_dom_Document >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_dom_Document* node = dynamic_cast<js_dom_Document*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_Node, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_stylesheets_StyleSheet, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_stylesheets_StyleSheet());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_stylesheets_StyleSheet >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_stylesheets_StyleSheet >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_stylesheets_StyleSheet* node = dynamic_cast<js_stylesheets_StyleSheet*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_stylesheets_StyleSheetList, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_stylesheets_StyleSheetList());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_stylesheets_StyleSheetList >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_stylesheets_StyleSheetList >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_stylesheets_StyleSheetList* node = dynamic_cast<js_stylesheets_StyleSheetList*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_stylesheets_MediaList, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_stylesheets_MediaList());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_stylesheets_MediaList >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_stylesheets_MediaList >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_stylesheets_MediaList* node = dynamic_cast<js_stylesheets_MediaList*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("mediaText");
        if(attr != objToWrap->attr_list().end()) {
            node->mediaText = boost::lexical_cast< stylesheets::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["mediaText"] << "' to stylesheets::DOMString");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_stylesheets_LinkStyle, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_stylesheets_LinkStyle());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_stylesheets_LinkStyle >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_stylesheets_LinkStyle >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_stylesheets_LinkStyle* node = dynamic_cast<js_stylesheets_LinkStyle*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_stylesheets_DocumentStyle, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_stylesheets_DocumentStyle());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_stylesheets_DocumentStyle >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_stylesheets_DocumentStyle >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_stylesheets_DocumentStyle* node = dynamic_cast<js_stylesheets_DocumentStyle*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_views_AbstractView, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_views_AbstractView());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_views_AbstractView >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_views_AbstractView >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_views_AbstractView* node = dynamic_cast<js_views_AbstractView*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_views_DocumentView, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_views_DocumentView());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_views_DocumentView >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_views_DocumentView >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_views_DocumentView* node = dynamic_cast<js_views_DocumentView*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSRuleList, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSRuleList());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSRuleList >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSRuleList >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSRuleList* node = dynamic_cast<js_css_CSSRuleList*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSRule* node = dynamic_cast<js_css_CSSRule*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cssText");
        if(attr != objToWrap->attr_list().end()) {
            node->cssText = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cssText"] << "' to css::DOMString");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSStyleRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSStyleRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSStyleRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSStyleRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSStyleRule* node = dynamic_cast<js_css_CSSStyleRule*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("selectorText");
        if(attr != objToWrap->attr_list().end()) {
            node->selectorText = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["selectorText"] << "' to css::DOMString");
    }
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSMediaRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSMediaRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSMediaRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSMediaRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSMediaRule* node = dynamic_cast<js_css_CSSMediaRule*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSFontFaceRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSFontFaceRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSFontFaceRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSFontFaceRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSFontFaceRule* node = dynamic_cast<js_css_CSSFontFaceRule*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSPageRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSPageRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSPageRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSPageRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSPageRule* node = dynamic_cast<js_css_CSSPageRule*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("selectorText");
        if(attr != objToWrap->attr_list().end()) {
            node->selectorText = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["selectorText"] << "' to css::DOMString");
    }
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSImportRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSImportRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSImportRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSImportRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSImportRule* node = dynamic_cast<js_css_CSSImportRule*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSCharsetRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSCharsetRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSCharsetRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSCharsetRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSCharsetRule* node = dynamic_cast<js_css_CSSCharsetRule*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("encoding");
        if(attr != objToWrap->attr_list().end()) {
            node->encoding = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["encoding"] << "' to css::DOMString");
    }
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSUnknownRule, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSUnknownRule());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSUnknownRule >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSUnknownRule >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSUnknownRule* node = dynamic_cast<js_css_CSSUnknownRule*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSRule, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSStyleDeclaration, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSStyleDeclaration());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSStyleDeclaration >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSStyleDeclaration >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSStyleDeclaration* node = dynamic_cast<js_css_CSSStyleDeclaration*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cssText");
        if(attr != objToWrap->attr_list().end()) {
            node->cssText = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cssText"] << "' to css::DOMString");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSValue, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSValue());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSValue >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSValue >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSValue* node = dynamic_cast<js_css_CSSValue*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cssText");
        if(attr != objToWrap->attr_list().end()) {
            node->cssText = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cssText"] << "' to css::DOMString");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSPrimitiveValue, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSPrimitiveValue());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSPrimitiveValue >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSPrimitiveValue >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSPrimitiveValue* node = dynamic_cast<js_css_CSSPrimitiveValue*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSValue, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSValueList, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSValueList());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSValueList >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSValueList >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSValueList* node = dynamic_cast<js_css_CSSValueList*>(node_ptr.get());
    TreeNodeFromEntity< js_css_CSSValue, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_RGBColor, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_RGBColor());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_RGBColor >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_RGBColor >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_RGBColor* node = dynamic_cast<js_css_RGBColor*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_Rect, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_Rect());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_Rect >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_Rect >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_Rect* node = dynamic_cast<js_css_Rect*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_Counter, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_Counter());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_Counter >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_Counter >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_Counter* node = dynamic_cast<js_css_Counter*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_ElementCSSInlineStyle, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_ElementCSSInlineStyle());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_ElementCSSInlineStyle >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_ElementCSSInlineStyle >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_ElementCSSInlineStyle* node = dynamic_cast<js_css_ElementCSSInlineStyle*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSS2Properties, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSS2Properties());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSS2Properties >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSS2Properties >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSS2Properties* node = dynamic_cast<js_css_CSS2Properties*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("azimuth");
        if(attr != objToWrap->attr_list().end()) {
            node->azimuth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["azimuth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("background");
        if(attr != objToWrap->attr_list().end()) {
            node->background = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["background"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("backgroundAttachment");
        if(attr != objToWrap->attr_list().end()) {
            node->backgroundAttachment = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["backgroundAttachment"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("backgroundColor");
        if(attr != objToWrap->attr_list().end()) {
            node->backgroundColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["backgroundColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("backgroundImage");
        if(attr != objToWrap->attr_list().end()) {
            node->backgroundImage = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["backgroundImage"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("backgroundPosition");
        if(attr != objToWrap->attr_list().end()) {
            node->backgroundPosition = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["backgroundPosition"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("backgroundRepeat");
        if(attr != objToWrap->attr_list().end()) {
            node->backgroundRepeat = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["backgroundRepeat"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("border");
        if(attr != objToWrap->attr_list().end()) {
            node->border = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["border"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderCollapse");
        if(attr != objToWrap->attr_list().end()) {
            node->borderCollapse = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderCollapse"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderColor");
        if(attr != objToWrap->attr_list().end()) {
            node->borderColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderSpacing");
        if(attr != objToWrap->attr_list().end()) {
            node->borderSpacing = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderSpacing"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->borderStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderTop");
        if(attr != objToWrap->attr_list().end()) {
            node->borderTop = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderTop"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderRight");
        if(attr != objToWrap->attr_list().end()) {
            node->borderRight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderRight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderBottom");
        if(attr != objToWrap->attr_list().end()) {
            node->borderBottom = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderBottom"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderLeft");
        if(attr != objToWrap->attr_list().end()) {
            node->borderLeft = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderLeft"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderTopColor");
        if(attr != objToWrap->attr_list().end()) {
            node->borderTopColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderTopColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderRightColor");
        if(attr != objToWrap->attr_list().end()) {
            node->borderRightColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderRightColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderBottomColor");
        if(attr != objToWrap->attr_list().end()) {
            node->borderBottomColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderBottomColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderLeftColor");
        if(attr != objToWrap->attr_list().end()) {
            node->borderLeftColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderLeftColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderTopStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->borderTopStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderTopStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderRightStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->borderRightStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderRightStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderBottomStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->borderBottomStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderBottomStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderLeftStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->borderLeftStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderLeftStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderTopWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->borderTopWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderTopWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderRightWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->borderRightWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderRightWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderBottomWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->borderBottomWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderBottomWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderLeftWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->borderLeftWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderLeftWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("borderWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->borderWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["borderWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("bottom");
        if(attr != objToWrap->attr_list().end()) {
            node->bottom = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["bottom"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("captionSide");
        if(attr != objToWrap->attr_list().end()) {
            node->captionSide = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["captionSide"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("clear");
        if(attr != objToWrap->attr_list().end()) {
            node->clear = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["clear"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("clip");
        if(attr != objToWrap->attr_list().end()) {
            node->clip = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["clip"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("color");
        if(attr != objToWrap->attr_list().end()) {
            node->color = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["color"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("content");
        if(attr != objToWrap->attr_list().end()) {
            node->content = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["content"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("counterIncrement");
        if(attr != objToWrap->attr_list().end()) {
            node->counterIncrement = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["counterIncrement"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("counterReset");
        if(attr != objToWrap->attr_list().end()) {
            node->counterReset = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["counterReset"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cue");
        if(attr != objToWrap->attr_list().end()) {
            node->cue = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cue"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cueAfter");
        if(attr != objToWrap->attr_list().end()) {
            node->cueAfter = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cueAfter"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cueBefore");
        if(attr != objToWrap->attr_list().end()) {
            node->cueBefore = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cueBefore"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cursor");
        if(attr != objToWrap->attr_list().end()) {
            node->cursor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cursor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("direction");
        if(attr != objToWrap->attr_list().end()) {
            node->direction = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["direction"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("display");
        if(attr != objToWrap->attr_list().end()) {
            node->display = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["display"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("elevation");
        if(attr != objToWrap->attr_list().end()) {
            node->elevation = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["elevation"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("emptyCells");
        if(attr != objToWrap->attr_list().end()) {
            node->emptyCells = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["emptyCells"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cssFloat");
        if(attr != objToWrap->attr_list().end()) {
            node->cssFloat = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cssFloat"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("font");
        if(attr != objToWrap->attr_list().end()) {
            node->font = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["font"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontFamily");
        if(attr != objToWrap->attr_list().end()) {
            node->fontFamily = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontFamily"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontSize");
        if(attr != objToWrap->attr_list().end()) {
            node->fontSize = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontSize"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontSizeAdjust");
        if(attr != objToWrap->attr_list().end()) {
            node->fontSizeAdjust = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontSizeAdjust"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontStretch");
        if(attr != objToWrap->attr_list().end()) {
            node->fontStretch = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontStretch"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->fontStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontVariant");
        if(attr != objToWrap->attr_list().end()) {
            node->fontVariant = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontVariant"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("fontWeight");
        if(attr != objToWrap->attr_list().end()) {
            node->fontWeight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["fontWeight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("left");
        if(attr != objToWrap->attr_list().end()) {
            node->left = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["left"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("letterSpacing");
        if(attr != objToWrap->attr_list().end()) {
            node->letterSpacing = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["letterSpacing"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("lineHeight");
        if(attr != objToWrap->attr_list().end()) {
            node->lineHeight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["lineHeight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("listStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->listStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["listStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("listStyleImage");
        if(attr != objToWrap->attr_list().end()) {
            node->listStyleImage = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["listStyleImage"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("listStylePosition");
        if(attr != objToWrap->attr_list().end()) {
            node->listStylePosition = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["listStylePosition"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("listStyleType");
        if(attr != objToWrap->attr_list().end()) {
            node->listStyleType = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["listStyleType"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("margin");
        if(attr != objToWrap->attr_list().end()) {
            node->margin = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["margin"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginTop");
        if(attr != objToWrap->attr_list().end()) {
            node->marginTop = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginTop"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginRight");
        if(attr != objToWrap->attr_list().end()) {
            node->marginRight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginRight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginBottom");
        if(attr != objToWrap->attr_list().end()) {
            node->marginBottom = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginBottom"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginLeft");
        if(attr != objToWrap->attr_list().end()) {
            node->marginLeft = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginLeft"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("markerOffset");
        if(attr != objToWrap->attr_list().end()) {
            node->markerOffset = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["markerOffset"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marks");
        if(attr != objToWrap->attr_list().end()) {
            node->marks = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marks"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("maxHeight");
        if(attr != objToWrap->attr_list().end()) {
            node->maxHeight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["maxHeight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("maxWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->maxWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["maxWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("minHeight");
        if(attr != objToWrap->attr_list().end()) {
            node->minHeight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["minHeight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("minWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->minWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["minWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("orphans");
        if(attr != objToWrap->attr_list().end()) {
            node->orphans = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["orphans"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("outline");
        if(attr != objToWrap->attr_list().end()) {
            node->outline = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["outline"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("outlineColor");
        if(attr != objToWrap->attr_list().end()) {
            node->outlineColor = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["outlineColor"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("outlineStyle");
        if(attr != objToWrap->attr_list().end()) {
            node->outlineStyle = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["outlineStyle"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("outlineWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->outlineWidth = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["outlineWidth"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("overflow");
        if(attr != objToWrap->attr_list().end()) {
            node->overflow = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["overflow"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("padding");
        if(attr != objToWrap->attr_list().end()) {
            node->padding = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["padding"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("paddingTop");
        if(attr != objToWrap->attr_list().end()) {
            node->paddingTop = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["paddingTop"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("paddingRight");
        if(attr != objToWrap->attr_list().end()) {
            node->paddingRight = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["paddingRight"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("paddingBottom");
        if(attr != objToWrap->attr_list().end()) {
            node->paddingBottom = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["paddingBottom"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("paddingLeft");
        if(attr != objToWrap->attr_list().end()) {
            node->paddingLeft = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["paddingLeft"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("page");
        if(attr != objToWrap->attr_list().end()) {
            node->page = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["page"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pageBreakAfter");
        if(attr != objToWrap->attr_list().end()) {
            node->pageBreakAfter = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pageBreakAfter"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pageBreakBefore");
        if(attr != objToWrap->attr_list().end()) {
            node->pageBreakBefore = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pageBreakBefore"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pageBreakInside");
        if(attr != objToWrap->attr_list().end()) {
            node->pageBreakInside = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pageBreakInside"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pause");
        if(attr != objToWrap->attr_list().end()) {
            node->pause = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pause"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pauseAfter");
        if(attr != objToWrap->attr_list().end()) {
            node->pauseAfter = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pauseAfter"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pauseBefore");
        if(attr != objToWrap->attr_list().end()) {
            node->pauseBefore = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pauseBefore"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pitch");
        if(attr != objToWrap->attr_list().end()) {
            node->pitch = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pitch"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("pitchRange");
        if(attr != objToWrap->attr_list().end()) {
            node->pitchRange = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["pitchRange"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("playDuring");
        if(attr != objToWrap->attr_list().end()) {
            node->playDuring = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["playDuring"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("position");
        if(attr != objToWrap->attr_list().end()) {
            node->position = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["position"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("quotes");
        if(attr != objToWrap->attr_list().end()) {
            node->quotes = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["quotes"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("richness");
        if(attr != objToWrap->attr_list().end()) {
            node->richness = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["richness"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("right");
        if(attr != objToWrap->attr_list().end()) {
            node->right = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["right"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("speak");
        if(attr != objToWrap->attr_list().end()) {
            node->speak = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["speak"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("speakHeader");
        if(attr != objToWrap->attr_list().end()) {
            node->speakHeader = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["speakHeader"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("speakNumeral");
        if(attr != objToWrap->attr_list().end()) {
            node->speakNumeral = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["speakNumeral"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("speakPunctuation");
        if(attr != objToWrap->attr_list().end()) {
            node->speakPunctuation = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["speakPunctuation"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("speechRate");
        if(attr != objToWrap->attr_list().end()) {
            node->speechRate = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["speechRate"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("stress");
        if(attr != objToWrap->attr_list().end()) {
            node->stress = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["stress"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tableLayout");
        if(attr != objToWrap->attr_list().end()) {
            node->tableLayout = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tableLayout"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("textAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->textAlign = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["textAlign"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("textDecoration");
        if(attr != objToWrap->attr_list().end()) {
            node->textDecoration = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["textDecoration"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("textIndent");
        if(attr != objToWrap->attr_list().end()) {
            node->textIndent = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["textIndent"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("textShadow");
        if(attr != objToWrap->attr_list().end()) {
            node->textShadow = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["textShadow"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("textTransform");
        if(attr != objToWrap->attr_list().end()) {
            node->textTransform = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["textTransform"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("top");
        if(attr != objToWrap->attr_list().end()) {
            node->top = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["top"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("unicodeBidi");
        if(attr != objToWrap->attr_list().end()) {
            node->unicodeBidi = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["unicodeBidi"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("verticalAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->verticalAlign = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["verticalAlign"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("visibility");
        if(attr != objToWrap->attr_list().end()) {
            node->visibility = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["visibility"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("voiceFamily");
        if(attr != objToWrap->attr_list().end()) {
            node->voiceFamily = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["voiceFamily"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("volume");
        if(attr != objToWrap->attr_list().end()) {
            node->volume = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["volume"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("whiteSpace");
        if(attr != objToWrap->attr_list().end()) {
            node->whiteSpace = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["whiteSpace"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("widows");
        if(attr != objToWrap->attr_list().end()) {
            node->widows = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["widows"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("wordSpacing");
        if(attr != objToWrap->attr_list().end()) {
            node->wordSpacing = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["wordSpacing"] << "' to css::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("zIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->zIndex = boost::lexical_cast< css::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["zIndex"] << "' to css::DOMString");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_CSSStyleSheet, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_CSSStyleSheet());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_CSSStyleSheet >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_CSSStyleSheet >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_CSSStyleSheet* node = dynamic_cast<js_css_CSSStyleSheet*>(node_ptr.get());
    TreeNodeFromEntity< js_stylesheets_StyleSheet, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_ViewCSS, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_ViewCSS());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_ViewCSS >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_ViewCSS >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_ViewCSS* node = dynamic_cast<js_css_ViewCSS*>(node_ptr.get());
    TreeNodeFromEntity< js_views_AbstractView, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_DocumentCSS, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_DocumentCSS());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_DocumentCSS >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_DocumentCSS >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_DocumentCSS* node = dynamic_cast<js_css_DocumentCSS*>(node_ptr.get());
    TreeNodeFromEntity< js_stylesheets_DocumentStyle, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_css_DOMImplementationCSS, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_css_DOMImplementationCSS());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_css_DOMImplementationCSS >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_css_DOMImplementationCSS >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_css_DOMImplementationCSS* node = dynamic_cast<js_css_DOMImplementationCSS*>(node_ptr.get());
    TreeNodeFromEntity< js_dom_DOMImplementation, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_EventException, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_EventException());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_EventException >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_EventException >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_EventException* node = dynamic_cast<js_events_EventException*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("code");
        if(attr != objToWrap->attr_list().end()) {
            node->code = boost::lexical_cast< short unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["code"] << "' to short unsigned int");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_EventTarget, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_EventTarget());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_EventTarget >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_EventTarget >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_EventTarget* node = dynamic_cast<js_events_EventTarget*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_EventListener, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_EventListener());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_EventListener >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_EventListener >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_EventListener* node = dynamic_cast<js_events_EventListener*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_Event, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_Event());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_Event >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_Event >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_Event* node = dynamic_cast<js_events_Event*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_DocumentEvent, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_DocumentEvent());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_DocumentEvent >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_DocumentEvent >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_DocumentEvent* node = dynamic_cast<js_events_DocumentEvent*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_UIEvent, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_UIEvent());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_UIEvent >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_UIEvent >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_UIEvent* node = dynamic_cast<js_events_UIEvent*>(node_ptr.get());
    TreeNodeFromEntity< js_events_Event, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_MouseEvent, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_MouseEvent());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_MouseEvent >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_MouseEvent >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_MouseEvent* node = dynamic_cast<js_events_MouseEvent*>(node_ptr.get());
    TreeNodeFromEntity< js_events_UIEvent, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_events_MutationEvent, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_events_MutationEvent());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_events_MutationEvent >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_events_MutationEvent >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_events_MutationEvent* node = dynamic_cast<js_events_MutationEvent*>(node_ptr.get());
    TreeNodeFromEntity< js_events_Event, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLCollection, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLCollection());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLCollection >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLCollection >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLCollection* node = dynamic_cast<js_html2_HTMLCollection*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLOptionsCollection, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLOptionsCollection());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLOptionsCollection >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLOptionsCollection >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLOptionsCollection* node = dynamic_cast<js_html2_HTMLOptionsCollection*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("length");
        if(attr != objToWrap->attr_list().end()) {
            node->length = boost::lexical_cast< long unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["length"] << "' to long unsigned int");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLDocument, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLDocument());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLDocument >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLDocument >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLDocument* node = dynamic_cast<js_html2_HTMLDocument*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("title");
        if(attr != objToWrap->attr_list().end()) {
            node->title = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["title"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cookie");
        if(attr != objToWrap->attr_list().end()) {
            node->cookie = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cookie"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("innerHTML");
        if(attr != objToWrap->attr_list().end()) {
            node->innerHTML = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["innerHTML"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_dom_Document, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLElement* node = dynamic_cast<js_html2_HTMLElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("id");
        if(attr != objToWrap->attr_list().end()) {
            node->id = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["id"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("title");
        if(attr != objToWrap->attr_list().end()) {
            node->title = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["title"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("lang");
        if(attr != objToWrap->attr_list().end()) {
            node->lang = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["lang"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("dir");
        if(attr != objToWrap->attr_list().end()) {
            node->dir = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["dir"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("className");
        if(attr != objToWrap->attr_list().end()) {
            node->className = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["className"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("innerHTML");
        if(attr != objToWrap->attr_list().end()) {
            node->innerHTML = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["innerHTML"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_dom_Element, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLHtmlElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLHtmlElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLHtmlElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLHtmlElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLHtmlElement* node = dynamic_cast<js_html2_HTMLHtmlElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("version");
        if(attr != objToWrap->attr_list().end()) {
            node->version = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["version"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLHeadElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLHeadElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLHeadElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLHeadElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLHeadElement* node = dynamic_cast<js_html2_HTMLHeadElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("profile");
        if(attr != objToWrap->attr_list().end()) {
            node->profile = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["profile"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLLinkElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLLinkElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLLinkElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLLinkElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLLinkElement* node = dynamic_cast<js_html2_HTMLLinkElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("charset");
        if(attr != objToWrap->attr_list().end()) {
            node->charset = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["charset"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("href");
        if(attr != objToWrap->attr_list().end()) {
            node->href = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["href"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("hreflang");
        if(attr != objToWrap->attr_list().end()) {
            node->hreflang = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["hreflang"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("media");
        if(attr != objToWrap->attr_list().end()) {
            node->media = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["media"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rel");
        if(attr != objToWrap->attr_list().end()) {
            node->rel = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rel"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rev");
        if(attr != objToWrap->attr_list().end()) {
            node->rev = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rev"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("target");
        if(attr != objToWrap->attr_list().end()) {
            node->target = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["target"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTitleElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTitleElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTitleElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTitleElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTitleElement* node = dynamic_cast<js_html2_HTMLTitleElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("text");
        if(attr != objToWrap->attr_list().end()) {
            node->text = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["text"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLMetaElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLMetaElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLMetaElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLMetaElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLMetaElement* node = dynamic_cast<js_html2_HTMLMetaElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("content");
        if(attr != objToWrap->attr_list().end()) {
            node->content = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["content"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("httpEquiv");
        if(attr != objToWrap->attr_list().end()) {
            node->httpEquiv = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["httpEquiv"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("scheme");
        if(attr != objToWrap->attr_list().end()) {
            node->scheme = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["scheme"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLBaseElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLBaseElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLBaseElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLBaseElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLBaseElement* node = dynamic_cast<js_html2_HTMLBaseElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("href");
        if(attr != objToWrap->attr_list().end()) {
            node->href = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["href"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("target");
        if(attr != objToWrap->attr_list().end()) {
            node->target = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["target"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLIsIndexElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLIsIndexElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLIsIndexElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLIsIndexElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLIsIndexElement* node = dynamic_cast<js_html2_HTMLIsIndexElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("prompt");
        if(attr != objToWrap->attr_list().end()) {
            node->prompt = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["prompt"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLStyleElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLStyleElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLStyleElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLStyleElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLStyleElement* node = dynamic_cast<js_html2_HTMLStyleElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("media");
        if(attr != objToWrap->attr_list().end()) {
            node->media = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["media"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLBodyElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLBodyElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLBodyElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLBodyElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLBodyElement* node = dynamic_cast<js_html2_HTMLBodyElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("aLink");
        if(attr != objToWrap->attr_list().end()) {
            node->aLink = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["aLink"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("background");
        if(attr != objToWrap->attr_list().end()) {
            node->background = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["background"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("bgColor");
        if(attr != objToWrap->attr_list().end()) {
            node->bgColor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["bgColor"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("link");
        if(attr != objToWrap->attr_list().end()) {
            node->link = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["link"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("text");
        if(attr != objToWrap->attr_list().end()) {
            node->text = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["text"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vLink");
        if(attr != objToWrap->attr_list().end()) {
            node->vLink = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vLink"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLFormElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLFormElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLFormElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLFormElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLFormElement* node = dynamic_cast<js_html2_HTMLFormElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("acceptCharset");
        if(attr != objToWrap->attr_list().end()) {
            node->acceptCharset = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["acceptCharset"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("action");
        if(attr != objToWrap->attr_list().end()) {
            node->action = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["action"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("enctype");
        if(attr != objToWrap->attr_list().end()) {
            node->enctype = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["enctype"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("method");
        if(attr != objToWrap->attr_list().end()) {
            node->method = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["method"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("target");
        if(attr != objToWrap->attr_list().end()) {
            node->target = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["target"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLSelectElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLSelectElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLSelectElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLSelectElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLSelectElement* node = dynamic_cast<js_html2_HTMLSelectElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("selectedIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->selectedIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["selectedIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("length");
        if(attr != objToWrap->attr_list().end()) {
            node->length = boost::lexical_cast< long unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["length"] << "' to long unsigned int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("multiple");
        if(attr != objToWrap->attr_list().end()) {
            node->multiple = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["multiple"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLOptGroupElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLOptGroupElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLOptGroupElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLOptGroupElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLOptGroupElement* node = dynamic_cast<js_html2_HTMLOptGroupElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("label");
        if(attr != objToWrap->attr_list().end()) {
            node->label = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["label"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLOptionElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLOptionElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLOptionElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLOptionElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLOptionElement* node = dynamic_cast<js_html2_HTMLOptionElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("defaultSelected");
        if(attr != objToWrap->attr_list().end()) {
            node->defaultSelected = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["defaultSelected"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("label");
        if(attr != objToWrap->attr_list().end()) {
            node->label = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["label"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("selected");
        if(attr != objToWrap->attr_list().end()) {
            node->selected = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["selected"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLInputElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLInputElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLInputElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLInputElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLInputElement* node = dynamic_cast<js_html2_HTMLInputElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("defaultValue");
        if(attr != objToWrap->attr_list().end()) {
            node->defaultValue = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["defaultValue"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("defaultChecked");
        if(attr != objToWrap->attr_list().end()) {
            node->defaultChecked = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["defaultChecked"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accept");
        if(attr != objToWrap->attr_list().end()) {
            node->accept = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accept"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("alt");
        if(attr != objToWrap->attr_list().end()) {
            node->alt = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["alt"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("checked");
        if(attr != objToWrap->attr_list().end()) {
            node->checked = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["checked"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("maxLength");
        if(attr != objToWrap->attr_list().end()) {
            node->maxLength = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["maxLength"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("readOnly");
        if(attr != objToWrap->attr_list().end()) {
            node->readOnly = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["readOnly"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< long unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to long unsigned int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("src");
        if(attr != objToWrap->attr_list().end()) {
            node->src = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["src"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("useMap");
        if(attr != objToWrap->attr_list().end()) {
            node->useMap = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["useMap"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTextAreaElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTextAreaElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTextAreaElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTextAreaElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTextAreaElement* node = dynamic_cast<js_html2_HTMLTextAreaElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("defaultValue");
        if(attr != objToWrap->attr_list().end()) {
            node->defaultValue = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["defaultValue"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cols");
        if(attr != objToWrap->attr_list().end()) {
            node->cols = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cols"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("readOnly");
        if(attr != objToWrap->attr_list().end()) {
            node->readOnly = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["readOnly"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rows");
        if(attr != objToWrap->attr_list().end()) {
            node->rows = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rows"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLButtonElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLButtonElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLButtonElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLButtonElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLButtonElement* node = dynamic_cast<js_html2_HTMLButtonElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("disabled");
        if(attr != objToWrap->attr_list().end()) {
            node->disabled = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["disabled"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLLabelElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLLabelElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLLabelElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLLabelElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLLabelElement* node = dynamic_cast<js_html2_HTMLLabelElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("htmlFor");
        if(attr != objToWrap->attr_list().end()) {
            node->htmlFor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["htmlFor"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLFieldSetElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLFieldSetElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLFieldSetElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLFieldSetElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLFieldSetElement* node = dynamic_cast<js_html2_HTMLFieldSetElement*>(node_ptr.get());
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLLegendElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLLegendElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLLegendElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLLegendElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLLegendElement* node = dynamic_cast<js_html2_HTMLLegendElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLUListElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLUListElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLUListElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLUListElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLUListElement* node = dynamic_cast<js_html2_HTMLUListElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("compact");
        if(attr != objToWrap->attr_list().end()) {
            node->compact = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["compact"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLOListElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLOListElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLOListElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLOListElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLOListElement* node = dynamic_cast<js_html2_HTMLOListElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("compact");
        if(attr != objToWrap->attr_list().end()) {
            node->compact = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["compact"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("start");
        if(attr != objToWrap->attr_list().end()) {
            node->start = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["start"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLDListElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLDListElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLDListElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLDListElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLDListElement* node = dynamic_cast<js_html2_HTMLDListElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("compact");
        if(attr != objToWrap->attr_list().end()) {
            node->compact = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["compact"] << "' to bool");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLDirectoryElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLDirectoryElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLDirectoryElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLDirectoryElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLDirectoryElement* node = dynamic_cast<js_html2_HTMLDirectoryElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("compact");
        if(attr != objToWrap->attr_list().end()) {
            node->compact = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["compact"] << "' to bool");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLMenuElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLMenuElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLMenuElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLMenuElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLMenuElement* node = dynamic_cast<js_html2_HTMLMenuElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("compact");
        if(attr != objToWrap->attr_list().end()) {
            node->compact = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["compact"] << "' to bool");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLLIElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLLIElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLLIElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLLIElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLLIElement* node = dynamic_cast<js_html2_HTMLLIElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to long int");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLDivElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLDivElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLDivElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLDivElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLDivElement* node = dynamic_cast<js_html2_HTMLDivElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLParagraphElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLParagraphElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLParagraphElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLParagraphElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLParagraphElement* node = dynamic_cast<js_html2_HTMLParagraphElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLHeadingElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLHeadingElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLHeadingElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLHeadingElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLHeadingElement* node = dynamic_cast<js_html2_HTMLHeadingElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLQuoteElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLQuoteElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLQuoteElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLQuoteElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLQuoteElement* node = dynamic_cast<js_html2_HTMLQuoteElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cite");
        if(attr != objToWrap->attr_list().end()) {
            node->cite = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cite"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLPreElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLPreElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLPreElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLPreElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLPreElement* node = dynamic_cast<js_html2_HTMLPreElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to long int");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLBRElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLBRElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLBRElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLBRElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLBRElement* node = dynamic_cast<js_html2_HTMLBRElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("clear");
        if(attr != objToWrap->attr_list().end()) {
            node->clear = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["clear"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLBaseFontElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLBaseFontElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLBaseFontElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLBaseFontElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLBaseFontElement* node = dynamic_cast<js_html2_HTMLBaseFontElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("color");
        if(attr != objToWrap->attr_list().end()) {
            node->color = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["color"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("face");
        if(attr != objToWrap->attr_list().end()) {
            node->face = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["face"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to long int");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLFontElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLFontElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLFontElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLFontElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLFontElement* node = dynamic_cast<js_html2_HTMLFontElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("color");
        if(attr != objToWrap->attr_list().end()) {
            node->color = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["color"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("face");
        if(attr != objToWrap->attr_list().end()) {
            node->face = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["face"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLHRElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLHRElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLHRElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLHRElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLHRElement* node = dynamic_cast<js_html2_HTMLHRElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("noShade");
        if(attr != objToWrap->attr_list().end()) {
            node->noShade = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["noShade"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("size");
        if(attr != objToWrap->attr_list().end()) {
            node->size = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["size"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLModElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLModElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLModElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLModElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLModElement* node = dynamic_cast<js_html2_HTMLModElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cite");
        if(attr != objToWrap->attr_list().end()) {
            node->cite = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cite"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("dateTime");
        if(attr != objToWrap->attr_list().end()) {
            node->dateTime = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["dateTime"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLAnchorElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLAnchorElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLAnchorElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLAnchorElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLAnchorElement* node = dynamic_cast<js_html2_HTMLAnchorElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("charset");
        if(attr != objToWrap->attr_list().end()) {
            node->charset = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["charset"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("coords");
        if(attr != objToWrap->attr_list().end()) {
            node->coords = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["coords"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("href");
        if(attr != objToWrap->attr_list().end()) {
            node->href = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["href"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("hreflang");
        if(attr != objToWrap->attr_list().end()) {
            node->hreflang = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["hreflang"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rel");
        if(attr != objToWrap->attr_list().end()) {
            node->rel = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rel"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rev");
        if(attr != objToWrap->attr_list().end()) {
            node->rev = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rev"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("shape");
        if(attr != objToWrap->attr_list().end()) {
            node->shape = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["shape"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("target");
        if(attr != objToWrap->attr_list().end()) {
            node->target = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["target"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLImageElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLImageElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLImageElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLImageElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLImageElement* node = dynamic_cast<js_html2_HTMLImageElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("alt");
        if(attr != objToWrap->attr_list().end()) {
            node->alt = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["alt"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("border");
        if(attr != objToWrap->attr_list().end()) {
            node->border = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["border"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("hspace");
        if(attr != objToWrap->attr_list().end()) {
            node->hspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["hspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("isMap");
        if(attr != objToWrap->attr_list().end()) {
            node->isMap = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["isMap"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("longDesc");
        if(attr != objToWrap->attr_list().end()) {
            node->longDesc = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["longDesc"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("src");
        if(attr != objToWrap->attr_list().end()) {
            node->src = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["src"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("useMap");
        if(attr != objToWrap->attr_list().end()) {
            node->useMap = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["useMap"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vspace");
        if(attr != objToWrap->attr_list().end()) {
            node->vspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to long int");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLObjectElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLObjectElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLObjectElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLObjectElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLObjectElement* node = dynamic_cast<js_html2_HTMLObjectElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("code");
        if(attr != objToWrap->attr_list().end()) {
            node->code = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["code"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("archive");
        if(attr != objToWrap->attr_list().end()) {
            node->archive = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["archive"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("border");
        if(attr != objToWrap->attr_list().end()) {
            node->border = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["border"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("codeBase");
        if(attr != objToWrap->attr_list().end()) {
            node->codeBase = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["codeBase"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("codeType");
        if(attr != objToWrap->attr_list().end()) {
            node->codeType = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["codeType"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("data");
        if(attr != objToWrap->attr_list().end()) {
            node->data = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["data"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("declare");
        if(attr != objToWrap->attr_list().end()) {
            node->declare = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["declare"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("hspace");
        if(attr != objToWrap->attr_list().end()) {
            node->hspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["hspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("standby");
        if(attr != objToWrap->attr_list().end()) {
            node->standby = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["standby"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("useMap");
        if(attr != objToWrap->attr_list().end()) {
            node->useMap = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["useMap"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vspace");
        if(attr != objToWrap->attr_list().end()) {
            node->vspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLParamElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLParamElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLParamElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLParamElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLParamElement* node = dynamic_cast<js_html2_HTMLParamElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("value");
        if(attr != objToWrap->attr_list().end()) {
            node->value = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["value"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("valueType");
        if(attr != objToWrap->attr_list().end()) {
            node->valueType = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["valueType"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLAppletElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLAppletElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLAppletElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLAppletElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLAppletElement* node = dynamic_cast<js_html2_HTMLAppletElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("alt");
        if(attr != objToWrap->attr_list().end()) {
            node->alt = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["alt"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("archive");
        if(attr != objToWrap->attr_list().end()) {
            node->archive = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["archive"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("code");
        if(attr != objToWrap->attr_list().end()) {
            node->code = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["code"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("codeBase");
        if(attr != objToWrap->attr_list().end()) {
            node->codeBase = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["codeBase"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("hspace");
        if(attr != objToWrap->attr_list().end()) {
            node->hspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["hspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("object");
        if(attr != objToWrap->attr_list().end()) {
            node->object = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["object"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vspace");
        if(attr != objToWrap->attr_list().end()) {
            node->vspace = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vspace"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLMapElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLMapElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLMapElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLMapElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLMapElement* node = dynamic_cast<js_html2_HTMLMapElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLAreaElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLAreaElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLAreaElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLAreaElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLAreaElement* node = dynamic_cast<js_html2_HTMLAreaElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("accessKey");
        if(attr != objToWrap->attr_list().end()) {
            node->accessKey = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["accessKey"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("alt");
        if(attr != objToWrap->attr_list().end()) {
            node->alt = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["alt"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("coords");
        if(attr != objToWrap->attr_list().end()) {
            node->coords = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["coords"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("href");
        if(attr != objToWrap->attr_list().end()) {
            node->href = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["href"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("noHref");
        if(attr != objToWrap->attr_list().end()) {
            node->noHref = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["noHref"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("shape");
        if(attr != objToWrap->attr_list().end()) {
            node->shape = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["shape"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("tabIndex");
        if(attr != objToWrap->attr_list().end()) {
            node->tabIndex = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["tabIndex"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("target");
        if(attr != objToWrap->attr_list().end()) {
            node->target = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["target"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLScriptElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLScriptElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLScriptElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLScriptElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLScriptElement* node = dynamic_cast<js_html2_HTMLScriptElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("text");
        if(attr != objToWrap->attr_list().end()) {
            node->text = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["text"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("htmlFor");
        if(attr != objToWrap->attr_list().end()) {
            node->htmlFor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["htmlFor"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("event");
        if(attr != objToWrap->attr_list().end()) {
            node->event = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["event"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("charset");
        if(attr != objToWrap->attr_list().end()) {
            node->charset = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["charset"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("defer");
        if(attr != objToWrap->attr_list().end()) {
            node->defer = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["defer"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("src");
        if(attr != objToWrap->attr_list().end()) {
            node->src = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["src"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("type");
        if(attr != objToWrap->attr_list().end()) {
            node->type = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["type"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableElement* node = dynamic_cast<js_html2_HTMLTableElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("bgColor");
        if(attr != objToWrap->attr_list().end()) {
            node->bgColor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["bgColor"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("border");
        if(attr != objToWrap->attr_list().end()) {
            node->border = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["border"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cellPadding");
        if(attr != objToWrap->attr_list().end()) {
            node->cellPadding = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cellPadding"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cellSpacing");
        if(attr != objToWrap->attr_list().end()) {
            node->cellSpacing = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cellSpacing"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("frame");
        if(attr != objToWrap->attr_list().end()) {
            node->frame = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["frame"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rules");
        if(attr != objToWrap->attr_list().end()) {
            node->rules = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rules"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("summary");
        if(attr != objToWrap->attr_list().end()) {
            node->summary = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["summary"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableCaptionElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableCaptionElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableCaptionElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableCaptionElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableCaptionElement* node = dynamic_cast<js_html2_HTMLTableCaptionElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableColElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableColElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableColElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableColElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableColElement* node = dynamic_cast<js_html2_HTMLTableColElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("ch");
        if(attr != objToWrap->attr_list().end()) {
            node->ch = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["ch"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("chOff");
        if(attr != objToWrap->attr_list().end()) {
            node->chOff = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["chOff"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("span");
        if(attr != objToWrap->attr_list().end()) {
            node->span = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["span"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->vAlign = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vAlign"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableSectionElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableSectionElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableSectionElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableSectionElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableSectionElement* node = dynamic_cast<js_html2_HTMLTableSectionElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("ch");
        if(attr != objToWrap->attr_list().end()) {
            node->ch = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["ch"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("chOff");
        if(attr != objToWrap->attr_list().end()) {
            node->chOff = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["chOff"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->vAlign = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vAlign"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableRowElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableRowElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableRowElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableRowElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableRowElement* node = dynamic_cast<js_html2_HTMLTableRowElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("bgColor");
        if(attr != objToWrap->attr_list().end()) {
            node->bgColor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["bgColor"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("ch");
        if(attr != objToWrap->attr_list().end()) {
            node->ch = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["ch"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("chOff");
        if(attr != objToWrap->attr_list().end()) {
            node->chOff = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["chOff"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->vAlign = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vAlign"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLTableCellElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLTableCellElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLTableCellElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLTableCellElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLTableCellElement* node = dynamic_cast<js_html2_HTMLTableCellElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("abbr");
        if(attr != objToWrap->attr_list().end()) {
            node->abbr = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["abbr"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("axis");
        if(attr != objToWrap->attr_list().end()) {
            node->axis = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["axis"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("bgColor");
        if(attr != objToWrap->attr_list().end()) {
            node->bgColor = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["bgColor"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("ch");
        if(attr != objToWrap->attr_list().end()) {
            node->ch = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["ch"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("chOff");
        if(attr != objToWrap->attr_list().end()) {
            node->chOff = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["chOff"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("colSpan");
        if(attr != objToWrap->attr_list().end()) {
            node->colSpan = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["colSpan"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("headers");
        if(attr != objToWrap->attr_list().end()) {
            node->headers = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["headers"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("noWrap");
        if(attr != objToWrap->attr_list().end()) {
            node->noWrap = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["noWrap"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rowSpan");
        if(attr != objToWrap->attr_list().end()) {
            node->rowSpan = boost::lexical_cast< long int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rowSpan"] << "' to long int");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("scope");
        if(attr != objToWrap->attr_list().end()) {
            node->scope = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["scope"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("vAlign");
        if(attr != objToWrap->attr_list().end()) {
            node->vAlign = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["vAlign"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLFrameSetElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLFrameSetElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLFrameSetElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLFrameSetElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLFrameSetElement* node = dynamic_cast<js_html2_HTMLFrameSetElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("cols");
        if(attr != objToWrap->attr_list().end()) {
            node->cols = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["cols"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("rows");
        if(attr != objToWrap->attr_list().end()) {
            node->rows = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["rows"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLFrameElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLFrameElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLFrameElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLFrameElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLFrameElement* node = dynamic_cast<js_html2_HTMLFrameElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("frameBorder");
        if(attr != objToWrap->attr_list().end()) {
            node->frameBorder = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["frameBorder"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("longDesc");
        if(attr != objToWrap->attr_list().end()) {
            node->longDesc = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["longDesc"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginHeight");
        if(attr != objToWrap->attr_list().end()) {
            node->marginHeight = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginHeight"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->marginWidth = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginWidth"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("noResize");
        if(attr != objToWrap->attr_list().end()) {
            node->noResize = boost::lexical_cast< bool > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["noResize"] << "' to bool");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("scrolling");
        if(attr != objToWrap->attr_list().end()) {
            node->scrolling = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["scrolling"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("src");
        if(attr != objToWrap->attr_list().end()) {
            node->src = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["src"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_html2_HTMLIFrameElement, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_html2_HTMLIFrameElement());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_html2_HTMLIFrameElement >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_html2_HTMLIFrameElement >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_html2_HTMLIFrameElement* node = dynamic_cast<js_html2_HTMLIFrameElement*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("align");
        if(attr != objToWrap->attr_list().end()) {
            node->align = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["align"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("frameBorder");
        if(attr != objToWrap->attr_list().end()) {
            node->frameBorder = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["frameBorder"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("height");
        if(attr != objToWrap->attr_list().end()) {
            node->height = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["height"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("longDesc");
        if(attr != objToWrap->attr_list().end()) {
            node->longDesc = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["longDesc"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginHeight");
        if(attr != objToWrap->attr_list().end()) {
            node->marginHeight = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginHeight"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("marginWidth");
        if(attr != objToWrap->attr_list().end()) {
            node->marginWidth = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["marginWidth"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("name");
        if(attr != objToWrap->attr_list().end()) {
            node->name = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["name"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("scrolling");
        if(attr != objToWrap->attr_list().end()) {
            node->scrolling = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["scrolling"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("src");
        if(attr != objToWrap->attr_list().end()) {
            node->src = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["src"] << "' to html2::DOMString");
    }
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("width");
        if(attr != objToWrap->attr_list().end()) {
            node->width = boost::lexical_cast< html2::DOMString > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["width"] << "' to html2::DOMString");
    }
    TreeNodeFromEntity< js_html2_HTMLElement, true >(objToWrap, node_ptr);

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_ranges_RangeException, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_ranges_RangeException());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_ranges_RangeException >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_ranges_RangeException >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_ranges_RangeException* node = dynamic_cast<js_ranges_RangeException*>(node_ptr.get());
    try {
        webEngine::AttrMap::iterator attr = objToWrap->attr_list().find("code");
        if(attr != objToWrap->attr_list().end()) {
            node->code = boost::lexical_cast< short unsigned int > ( (*attr).second );
        }
    } catch(boost::bad_lexical_cast &) {
        LOG4CXX_ERROR(webEngine::iLogger::GetLogger(), "Could not cast '" <<  objToWrap->attr_list()["code"] << "' to short unsigned int");
    }

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_ranges_Range, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_ranges_Range());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_ranges_Range >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_ranges_Range >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_ranges_Range* node = dynamic_cast<js_ranges_Range*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_ranges_DocumentRange, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_ranges_DocumentRange());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_ranges_DocumentRange >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_ranges_DocumentRange >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_ranges_DocumentRange* node = dynamic_cast<js_ranges_DocumentRange*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_traversal_NodeIterator, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_traversal_NodeIterator());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_traversal_NodeIterator >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_traversal_NodeIterator >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_traversal_NodeIterator* node = dynamic_cast<js_traversal_NodeIterator*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_traversal_NodeFilter, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_traversal_NodeFilter());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_traversal_NodeFilter >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_traversal_NodeFilter >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_traversal_NodeFilter* node = dynamic_cast<js_traversal_NodeFilter*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_traversal_TreeWalker, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_traversal_TreeWalker());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_traversal_TreeWalker >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_traversal_TreeWalker >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_traversal_TreeWalker* node = dynamic_cast<js_traversal_TreeWalker*>(node_ptr.get());

    return node_ptr;
}


template <>
v8_wrapper::tree_node_ptr TreeNodeFromEntity< js_traversal_DocumentTraversal, true>(webEngine::html_entity_ptr objToWrap, v8_wrapper::tree_node_ptr node_ptr)
{
    if(!node_ptr) {
        node_ptr.reset(new js_traversal_DocumentTraversal());
        node_ptr->m_this = v8::Persistent<v8::Object>::New(v8_wrapper::wrap_object< js_traversal_DocumentTraversal >(node_ptr.get()));
        //node_ptr->m_this.MakeWeak( NULL , v8_wrapper::Registrator< js_traversal_DocumentTraversal >::Destructor);
        node_ptr->m_tag = objToWrap->HtmlTag();
    }
    js_traversal_DocumentTraversal* node = dynamic_cast<js_traversal_DocumentTraversal*>(node_ptr.get());

    return node_ptr;
}

#endif

