#ifndef __js_header___
#define __js_header___

/*
  DO NOT EDIT!
  This file has been generated by generate_sources.py script.
  $Id: html_js.h 36164 2010-11-12 15:11:58Z santonov $
*/

#include <html.h>
#include <v8_wrapper.h>

class js_dom_DOMException : public virtual dom::DOMException, public v8_wrapper::Registrator< js_dom_DOMException > {
public:
    js_dom_DOMException() {}
    static v8::Handle<v8::Value> static_get_code(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_code(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(code != 0)
            _out << " code=\"" << code << "\" ";
        return _out.str();
    }
};

class js_dom_DOMImplementation : public virtual dom::DOMImplementation, public v8_wrapper::Registrator< js_dom_DOMImplementation > {
public:
    js_dom_DOMImplementation() {}
    static v8::Handle<v8::Value> static_hasFeature(const v8::Arguments& args);
    virtual bool hasFeature(std::string val_feature, std::string val_version);
    static v8::Handle<v8::Value> static_createDocumentType(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createDocumentType(std::string val_qualifiedName, std::string val_publicId, std::string val_systemId);
    static v8::Handle<v8::Value> static_createDocument(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createDocument(std::string val_namespaceURI, std::string val_qualifiedName, v8::Handle<v8::Value> val_doctype);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_dom_Node : public virtual dom::Node, public v8_wrapper::Registrator< js_dom_Node > {
public:
    js_dom_Node() {}
    static v8::Handle<v8::Value> static_insertBefore(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> insertBefore(v8::Handle<v8::Value> val_newChild, v8::Handle<v8::Value> val_refChild);
    static v8::Handle<v8::Value> static_replaceChild(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> replaceChild(v8::Handle<v8::Value> val_newChild, v8::Handle<v8::Value> val_oldChild);
    static v8::Handle<v8::Value> static_removeChild(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> removeChild(v8::Handle<v8::Value> val_oldChild);
    static v8::Handle<v8::Value> static_appendChild(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> appendChild(v8::Handle<v8::Value> val_newChild);
    static v8::Handle<v8::Value> static_hasChildNodes(const v8::Arguments& args);
    virtual bool hasChildNodes();
    static v8::Handle<v8::Value> static_cloneNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> cloneNode(bool val_deep);
    static v8::Handle<v8::Value> static_normalize(const v8::Arguments& args);
    virtual void normalize();
    static v8::Handle<v8::Value> static_isSupported(const v8::Arguments& args);
    virtual bool isSupported(std::string val_feature, std::string val_version);
    static v8::Handle<v8::Value> static_hasAttributes(const v8::Arguments& args);
    virtual bool hasAttributes();
    static v8::Handle<v8::Value> static_get_nodeName(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_nodeName(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_nodeValue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_nodeValue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_nodeType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_nodeType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_parentNode(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_parentNode(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_childNodes(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_childNodes(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_firstChild(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_firstChild(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_lastChild(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_lastChild(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_previousSibling(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_previousSibling(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_nextSibling(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_nextSibling(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_attributes(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_attributes(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ownerDocument(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ownerDocument(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_namespaceURI(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_namespaceURI(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_prefix(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_prefix(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_localName(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_localName(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!nodeName.empty())
            _out << " nodeName=\"" << nodeName << "\" ";
        if(!nodeValue.empty())
            _out << " nodeValue=\"" << nodeValue << "\" ";
        if(nodeType != 0)
            _out << " nodeType=\"" << nodeType << "\" ";
        if(!namespaceURI.empty())
            _out << " namespaceURI=\"" << namespaceURI << "\" ";
        if(!prefix.empty())
            _out << " prefix=\"" << prefix << "\" ";
        if(!localName.empty())
            _out << " localName=\"" << localName << "\" ";
        return _out.str();
    }
};

class js_dom_NodeList : public virtual dom::NodeList, public v8_wrapper::Registrator< js_dom_NodeList > {
public:
    js_dom_NodeList() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_dom_NamedNodeMap : public virtual dom::NamedNodeMap, public v8_wrapper::Registrator< js_dom_NamedNodeMap > {
public:
    js_dom_NamedNodeMap() {}
    static v8::Handle<v8::Value> static_getNamedItem(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getNamedItem(std::string val_name);
    static v8::Handle<v8::Value> static_setNamedItem(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> setNamedItem(v8::Handle<v8::Value> val_arg);
    static v8::Handle<v8::Value> static_removeNamedItem(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> removeNamedItem(std::string val_name);
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_getNamedItemNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getNamedItemNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_setNamedItemNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> setNamedItemNS(v8::Handle<v8::Value> val_arg);
    static v8::Handle<v8::Value> static_removeNamedItemNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> removeNamedItemNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_dom_CharacterData : public virtual dom::CharacterData, public js_dom_Node, public v8_wrapper::Registrator< js_dom_CharacterData > {
public:
    js_dom_CharacterData() {}
    static v8::Handle<v8::Value> static_substringData(const v8::Arguments& args);
    virtual std::string substringData(long unsigned int val_offset, long unsigned int val_count);
    static v8::Handle<v8::Value> static_appendData(const v8::Arguments& args);
    virtual void appendData(std::string val_arg);
    static v8::Handle<v8::Value> static_insertData(const v8::Arguments& args);
    virtual void insertData(long unsigned int val_offset, std::string val_arg);
    static v8::Handle<v8::Value> static_deleteData(const v8::Arguments& args);
    virtual void deleteData(long unsigned int val_offset, long unsigned int val_count);
    static v8::Handle<v8::Value> static_replaceData(const v8::Arguments& args);
    virtual void replaceData(long unsigned int val_offset, long unsigned int val_count, std::string val_arg);
    static v8::Handle<v8::Value> static_get_data(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_data(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!data.empty())
            _out << " data=\"" << data << "\" ";
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Attr : public virtual dom::Attr, public js_dom_Node, public v8_wrapper::Registrator< js_dom_Attr > {
public:
    js_dom_Attr() {}
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_specified(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_specified(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ownerElement(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ownerElement(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        _out << " specified=\"" << specified << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Element : public virtual dom::Element, public js_dom_Node, public v8_wrapper::Registrator< js_dom_Element > {
public:
    js_dom_Element() {}
    static v8::Handle<v8::Value> static_getAttribute(const v8::Arguments& args);
    virtual std::string getAttribute(std::string val_name);
    static v8::Handle<v8::Value> static_setAttribute(const v8::Arguments& args);
    virtual void setAttribute(std::string val_name, std::string val_value);
    static v8::Handle<v8::Value> static_removeAttribute(const v8::Arguments& args);
    virtual void removeAttribute(std::string val_name);
    static v8::Handle<v8::Value> static_getAttributeNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getAttributeNode(std::string val_name);
    static v8::Handle<v8::Value> static_setAttributeNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> setAttributeNode(v8::Handle<v8::Value> val_newAttr);
    static v8::Handle<v8::Value> static_removeAttributeNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> removeAttributeNode(v8::Handle<v8::Value> val_oldAttr);
    static v8::Handle<v8::Value> static_getElementsByTagName(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementsByTagName(std::string val_name);
    static v8::Handle<v8::Value> static_getAttributeNS(const v8::Arguments& args);
    virtual std::string getAttributeNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_setAttributeNS(const v8::Arguments& args);
    virtual void setAttributeNS(std::string val_namespaceURI, std::string val_qualifiedName, std::string val_value);
    static v8::Handle<v8::Value> static_removeAttributeNS(const v8::Arguments& args);
    virtual void removeAttributeNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_getAttributeNodeNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getAttributeNodeNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_setAttributeNodeNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> setAttributeNodeNS(v8::Handle<v8::Value> val_newAttr);
    static v8::Handle<v8::Value> static_getElementsByTagNameNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementsByTagNameNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_hasAttribute(const v8::Arguments& args);
    virtual bool hasAttribute(std::string val_name);
    static v8::Handle<v8::Value> static_hasAttributeNS(const v8::Arguments& args);
    virtual bool hasAttributeNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_get_tagName(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tagName(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!tagName.empty())
            _out << " tagName=\"" << tagName << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Text : public virtual dom::Text, public js_dom_CharacterData, public v8_wrapper::Registrator< js_dom_Text > {
public:
    js_dom_Text() {}
    static v8::Handle<v8::Value> static_splitText(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> splitText(long unsigned int val_offset);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_CharacterData::get_fields();
        return _out.str();
    }
};

class js_dom_Comment : public virtual dom::Comment, public js_dom_CharacterData, public v8_wrapper::Registrator< js_dom_Comment > {
public:
    js_dom_Comment() {}

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_CharacterData::get_fields();
        return _out.str();
    }
};

class js_dom_CDATASection : public virtual dom::CDATASection, public js_dom_Text, public v8_wrapper::Registrator< js_dom_CDATASection > {
public:
    js_dom_CDATASection() {}

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_Text::get_fields();
        return _out.str();
    }
};

class js_dom_DocumentType : public virtual dom::DocumentType, public js_dom_Node, public v8_wrapper::Registrator< js_dom_DocumentType > {
public:
    js_dom_DocumentType() {}
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_entities(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_entities(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_notations(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_notations(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_publicId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_publicId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_systemId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_systemId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_internalSubset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_internalSubset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!publicId.empty())
            _out << " publicId=\"" << publicId << "\" ";
        if(!systemId.empty())
            _out << " systemId=\"" << systemId << "\" ";
        if(!internalSubset.empty())
            _out << " internalSubset=\"" << internalSubset << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Notation : public virtual dom::Notation, public js_dom_Node, public v8_wrapper::Registrator< js_dom_Notation > {
public:
    js_dom_Notation() {}
    static v8::Handle<v8::Value> static_get_publicId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_publicId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_systemId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_systemId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!publicId.empty())
            _out << " publicId=\"" << publicId << "\" ";
        if(!systemId.empty())
            _out << " systemId=\"" << systemId << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Entity : public virtual dom::Entity, public js_dom_Node, public v8_wrapper::Registrator< js_dom_Entity > {
public:
    js_dom_Entity() {}
    static v8::Handle<v8::Value> static_get_publicId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_publicId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_systemId(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_systemId(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_notationName(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_notationName(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!publicId.empty())
            _out << " publicId=\"" << publicId << "\" ";
        if(!systemId.empty())
            _out << " systemId=\"" << systemId << "\" ";
        if(!notationName.empty())
            _out << " notationName=\"" << notationName << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_EntityReference : public virtual dom::EntityReference, public js_dom_Node, public v8_wrapper::Registrator< js_dom_EntityReference > {
public:
    js_dom_EntityReference() {}

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_ProcessingInstruction : public virtual dom::ProcessingInstruction, public js_dom_Node, public v8_wrapper::Registrator< js_dom_ProcessingInstruction > {
public:
    js_dom_ProcessingInstruction() {}
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_data(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_data(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        if(!data.empty())
            _out << " data=\"" << data << "\" ";
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_DocumentFragment : public virtual dom::DocumentFragment, public js_dom_Node, public v8_wrapper::Registrator< js_dom_DocumentFragment > {
public:
    js_dom_DocumentFragment() {}

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_dom_Document : public virtual dom::Document, public js_dom_Node, public v8_wrapper::Registrator< js_dom_Document > {
public:
    js_dom_Document() {}
    static v8::Handle<v8::Value> static_createElement(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createElement(std::string val_tagName);
    static v8::Handle<v8::Value> static_createDocumentFragment(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createDocumentFragment();
    static v8::Handle<v8::Value> static_createTextNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createTextNode(std::string val_data);
    static v8::Handle<v8::Value> static_createComment(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createComment(std::string val_data);
    static v8::Handle<v8::Value> static_createCDATASection(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createCDATASection(std::string val_data);
    static v8::Handle<v8::Value> static_createProcessingInstruction(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createProcessingInstruction(std::string val_target, std::string val_data);
    static v8::Handle<v8::Value> static_createAttribute(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createAttribute(std::string val_name);
    static v8::Handle<v8::Value> static_createEntityReference(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createEntityReference(std::string val_name);
    static v8::Handle<v8::Value> static_getElementsByTagName(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementsByTagName(std::string val_tagname);
    static v8::Handle<v8::Value> static_importNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> importNode(v8::Handle<v8::Value> val_importedNode, bool val_deep);
    static v8::Handle<v8::Value> static_createElementNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createElementNS(std::string val_namespaceURI, std::string val_qualifiedName);
    static v8::Handle<v8::Value> static_createAttributeNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createAttributeNS(std::string val_namespaceURI, std::string val_qualifiedName);
    static v8::Handle<v8::Value> static_getElementsByTagNameNS(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementsByTagNameNS(std::string val_namespaceURI, std::string val_localName);
    static v8::Handle<v8::Value> static_getElementById(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementById(std::string val_elementId);
    static v8::Handle<v8::Value> static_get_doctype(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_doctype(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_implementation(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_implementation(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_documentElement(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_documentElement(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_Node::get_fields();
        return _out.str();
    }
};

class js_stylesheets_StyleSheet : public virtual stylesheets::StyleSheet, public v8_wrapper::Registrator< js_stylesheets_StyleSheet > {
public:
    js_stylesheets_StyleSheet() {}
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ownerNode(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ownerNode(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_parentStyleSheet(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_parentStyleSheet(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_title(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_title(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_media(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_media(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        if(!title.empty())
            _out << " title=\"" << title << "\" ";
        return _out.str();
    }
};

class js_stylesheets_StyleSheetList : public virtual stylesheets::StyleSheetList, public v8_wrapper::Registrator< js_stylesheets_StyleSheetList > {
public:
    js_stylesheets_StyleSheetList() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_stylesheets_MediaList : public virtual stylesheets::MediaList, public v8_wrapper::Registrator< js_stylesheets_MediaList > {
public:
    js_stylesheets_MediaList() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual stylesheets::DOMString item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_deleteMedium(const v8::Arguments& args);
    virtual void deleteMedium(stylesheets::DOMString val_oldMedium);
    static v8::Handle<v8::Value> static_appendMedium(const v8::Arguments& args);
    virtual void appendMedium(stylesheets::DOMString val_newMedium);
    static v8::Handle<v8::Value> static_get_mediaText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_mediaText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!mediaText.empty())
            _out << " mediaText=\"" << mediaText << "\" ";
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_stylesheets_LinkStyle : public virtual stylesheets::LinkStyle, public v8_wrapper::Registrator< js_stylesheets_LinkStyle > {
public:
    js_stylesheets_LinkStyle() {}
    static v8::Handle<v8::Value> static_get_sheet(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_sheet(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_stylesheets_DocumentStyle : public virtual stylesheets::DocumentStyle, public v8_wrapper::Registrator< js_stylesheets_DocumentStyle > {
public:
    js_stylesheets_DocumentStyle() {}
    static v8::Handle<v8::Value> static_get_styleSheets(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_styleSheets(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_views_AbstractView : public virtual views::AbstractView, public v8_wrapper::Registrator< js_views_AbstractView > {
public:
    js_views_AbstractView() {}
    static v8::Handle<v8::Value> static_get_document(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_document(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_views_DocumentView : public virtual views::DocumentView, public v8_wrapper::Registrator< js_views_DocumentView > {
public:
    js_views_DocumentView() {}
    static v8::Handle<v8::Value> static_get_defaultView(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defaultView(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_css_CSSRuleList : public virtual css::CSSRuleList, public v8_wrapper::Registrator< js_css_CSSRuleList > {
public:
    js_css_CSSRuleList() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_css_CSSRule : public virtual css::CSSRule, public v8_wrapper::Registrator< js_css_CSSRule > {
public:
    js_css_CSSRule() {}
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cssText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_parentStyleSheet(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_parentStyleSheet(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_parentRule(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_parentRule(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(type != 0)
            _out << " type=\"" << type << "\" ";
        if(!cssText.empty())
            _out << " cssText=\"" << cssText << "\" ";
        return _out.str();
    }
};

class js_css_CSSStyleRule : public virtual css::CSSStyleRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSStyleRule > {
public:
    js_css_CSSStyleRule() {}
    static v8::Handle<v8::Value> static_get_selectorText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_selectorText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_style(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_style(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!selectorText.empty())
            _out << " selectorText=\"" << selectorText << "\" ";
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSMediaRule : public virtual css::CSSMediaRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSMediaRule > {
public:
    js_css_CSSMediaRule() {}
    static v8::Handle<v8::Value> static_insertRule(const v8::Arguments& args);
    virtual long unsigned int insertRule(css::DOMString val_rule, long unsigned int val_index);
    static v8::Handle<v8::Value> static_deleteRule(const v8::Arguments& args);
    virtual void deleteRule(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_media(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_media(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cssRules(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssRules(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSFontFaceRule : public virtual css::CSSFontFaceRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSFontFaceRule > {
public:
    js_css_CSSFontFaceRule() {}
    static v8::Handle<v8::Value> static_get_style(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_style(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSPageRule : public virtual css::CSSPageRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSPageRule > {
public:
    js_css_CSSPageRule() {}
    static v8::Handle<v8::Value> static_get_selectorText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_selectorText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_style(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_style(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!selectorText.empty())
            _out << " selectorText=\"" << selectorText << "\" ";
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSImportRule : public virtual css::CSSImportRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSImportRule > {
public:
    js_css_CSSImportRule() {}
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_media(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_media(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_styleSheet(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_styleSheet(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSCharsetRule : public virtual css::CSSCharsetRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSCharsetRule > {
public:
    js_css_CSSCharsetRule() {}
    static v8::Handle<v8::Value> static_get_encoding(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_encoding(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!encoding.empty())
            _out << " encoding=\"" << encoding << "\" ";
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSUnknownRule : public virtual css::CSSUnknownRule, public js_css_CSSRule, public v8_wrapper::Registrator< js_css_CSSUnknownRule > {
public:
    js_css_CSSUnknownRule() {}

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_css_CSSRule::get_fields();
        return _out.str();
    }
};

class js_css_CSSStyleDeclaration : public virtual css::CSSStyleDeclaration, public v8_wrapper::Registrator< js_css_CSSStyleDeclaration > {
public:
    js_css_CSSStyleDeclaration() {}
    static v8::Handle<v8::Value> static_getPropertyValue(const v8::Arguments& args);
    virtual css::DOMString getPropertyValue(css::DOMString val_propertyName);
    static v8::Handle<v8::Value> static_getPropertyCSSValue(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getPropertyCSSValue(css::DOMString val_propertyName);
    static v8::Handle<v8::Value> static_removeProperty(const v8::Arguments& args);
    virtual css::DOMString removeProperty(css::DOMString val_propertyName);
    static v8::Handle<v8::Value> static_getPropertyPriority(const v8::Arguments& args);
    virtual css::DOMString getPropertyPriority(css::DOMString val_propertyName);
    static v8::Handle<v8::Value> static_setProperty(const v8::Arguments& args);
    virtual void setProperty(css::DOMString val_propertyName, css::DOMString val_value, css::DOMString val_priority);
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual css::DOMString item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_cssText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_parentRule(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_parentRule(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!cssText.empty())
            _out << " cssText=\"" << cssText << "\" ";
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_css_CSSValue : public virtual css::CSSValue, public v8_wrapper::Registrator< js_css_CSSValue > {
public:
    js_css_CSSValue() {}
    static v8::Handle<v8::Value> static_get_cssText(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssText(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cssValueType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssValueType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!cssText.empty())
            _out << " cssText=\"" << cssText << "\" ";
        if(cssValueType != 0)
            _out << " cssValueType=\"" << cssValueType << "\" ";
        return _out.str();
    }
};

class js_css_CSSPrimitiveValue : public virtual css::CSSPrimitiveValue, public js_css_CSSValue, public v8_wrapper::Registrator< js_css_CSSPrimitiveValue > {
public:
    js_css_CSSPrimitiveValue() {}
    static v8::Handle<v8::Value> static_setFloatValue(const v8::Arguments& args);
    virtual void setFloatValue(short unsigned int val_unitType, double val_floatValue);
    static v8::Handle<v8::Value> static_getFloatValue(const v8::Arguments& args);
    virtual double getFloatValue(short unsigned int val_unitType);
    static v8::Handle<v8::Value> static_setStringValue(const v8::Arguments& args);
    virtual void setStringValue(short unsigned int val_stringType, css::DOMString val_stringValue);
    static v8::Handle<v8::Value> static_getStringValue(const v8::Arguments& args);
    virtual css::DOMString getStringValue();
    static v8::Handle<v8::Value> static_getCounterValue(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getCounterValue();
    static v8::Handle<v8::Value> static_getRectValue(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getRectValue();
    static v8::Handle<v8::Value> static_getRGBColorValue(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getRGBColorValue();
    static v8::Handle<v8::Value> static_get_primitiveType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_primitiveType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(primitiveType != 0)
            _out << " primitiveType=\"" << primitiveType << "\" ";
        _out << js_css_CSSValue::get_fields();
        return _out.str();
    }
};

class js_css_CSSValueList : public virtual css::CSSValueList, public js_css_CSSValue, public v8_wrapper::Registrator< js_css_CSSValueList > {
public:
    js_css_CSSValueList() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        _out << js_css_CSSValue::get_fields();
        return _out.str();
    }
};

class js_css_RGBColor : public virtual css::RGBColor, public v8_wrapper::Registrator< js_css_RGBColor > {
public:
    js_css_RGBColor() {}
    static v8::Handle<v8::Value> static_get_red(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_red(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_green(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_green(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_blue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_blue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_css_Rect : public virtual css::Rect, public v8_wrapper::Registrator< js_css_Rect > {
public:
    js_css_Rect() {}
    static v8::Handle<v8::Value> static_get_top(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_top(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_right(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_right(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bottom(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bottom(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_left(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_left(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_css_Counter : public virtual css::Counter, public v8_wrapper::Registrator< js_css_Counter > {
public:
    js_css_Counter() {}
    static v8::Handle<v8::Value> static_get_identifier(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_identifier(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_listStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_listStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_separator(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_separator(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!identifier.empty())
            _out << " identifier=\"" << identifier << "\" ";
        if(!listStyle.empty())
            _out << " listStyle=\"" << listStyle << "\" ";
        if(!separator.empty())
            _out << " separator=\"" << separator << "\" ";
        return _out.str();
    }
};

class js_css_ElementCSSInlineStyle : public virtual css::ElementCSSInlineStyle, public v8_wrapper::Registrator< js_css_ElementCSSInlineStyle > {
public:
    js_css_ElementCSSInlineStyle() {}
    static v8::Handle<v8::Value> static_get_style(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_style(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_css_CSS2Properties : public virtual css::CSS2Properties, public v8_wrapper::Registrator< js_css_CSS2Properties > {
public:
    js_css_CSS2Properties() {}
    static v8::Handle<v8::Value> static_get_azimuth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_azimuth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_background(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_background(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_backgroundAttachment(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_backgroundAttachment(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_backgroundColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_backgroundColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_backgroundImage(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_backgroundImage(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_backgroundPosition(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_backgroundPosition(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_backgroundRepeat(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_backgroundRepeat(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_border(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_border(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderCollapse(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderCollapse(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderSpacing(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderSpacing(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderTop(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderTop(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderRight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderRight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderBottom(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderBottom(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderLeft(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderLeft(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderTopColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderTopColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderRightColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderRightColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderBottomColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderBottomColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderLeftColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderLeftColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderTopStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderTopStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderRightStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderRightStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderBottomStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderBottomStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderLeftStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderLeftStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderTopWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderTopWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderRightWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderRightWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderBottomWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderBottomWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderLeftWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderLeftWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_borderWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_borderWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bottom(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bottom(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_captionSide(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_captionSide(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_clear(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_clear(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_clip(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_clip(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_color(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_color(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_content(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_content(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_counterIncrement(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_counterIncrement(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_counterReset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_counterReset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cueAfter(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cueAfter(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cueBefore(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cueBefore(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cursor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cursor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_direction(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_direction(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_display(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_display(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_elevation(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_elevation(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_emptyCells(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_emptyCells(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cssFloat(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssFloat(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_font(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_font(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontFamily(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontFamily(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontSize(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontSize(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontSizeAdjust(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontSizeAdjust(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontStretch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontStretch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontVariant(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontVariant(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_fontWeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_fontWeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_left(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_left(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_letterSpacing(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_letterSpacing(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_lineHeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_lineHeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_listStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_listStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_listStyleImage(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_listStyleImage(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_listStylePosition(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_listStylePosition(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_listStyleType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_listStyleType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_margin(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_margin(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginTop(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginTop(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginRight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginRight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginBottom(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginBottom(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginLeft(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginLeft(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_markerOffset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_markerOffset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marks(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marks(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_maxHeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_maxHeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_maxWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_maxWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_minHeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_minHeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_minWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_minWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_orphans(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_orphans(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_outline(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_outline(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_outlineColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_outlineColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_outlineStyle(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_outlineStyle(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_outlineWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_outlineWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_overflow(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_overflow(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_padding(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_padding(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_paddingTop(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_paddingTop(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_paddingRight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_paddingRight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_paddingBottom(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_paddingBottom(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_paddingLeft(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_paddingLeft(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_page(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_page(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pageBreakAfter(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pageBreakAfter(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pageBreakBefore(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pageBreakBefore(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pageBreakInside(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pageBreakInside(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pause(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pause(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pauseAfter(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pauseAfter(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pauseBefore(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pauseBefore(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pitch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pitch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_pitchRange(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_pitchRange(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_playDuring(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_playDuring(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_position(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_position(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_quotes(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_quotes(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_richness(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_richness(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_right(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_right(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_speak(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_speak(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_speakHeader(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_speakHeader(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_speakNumeral(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_speakNumeral(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_speakPunctuation(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_speakPunctuation(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_speechRate(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_speechRate(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_stress(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_stress(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tableLayout(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tableLayout(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_textAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_textAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_textDecoration(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_textDecoration(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_textIndent(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_textIndent(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_textShadow(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_textShadow(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_textTransform(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_textTransform(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_top(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_top(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_unicodeBidi(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_unicodeBidi(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_verticalAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_verticalAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_visibility(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_visibility(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_voiceFamily(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_voiceFamily(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_volume(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_volume(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_whiteSpace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_whiteSpace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_widows(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_widows(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_wordSpacing(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_wordSpacing(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_zIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_zIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!azimuth.empty())
            _out << " azimuth=\"" << azimuth << "\" ";
        if(!background.empty())
            _out << " background=\"" << background << "\" ";
        if(!backgroundAttachment.empty())
            _out << " backgroundAttachment=\"" << backgroundAttachment << "\" ";
        if(!backgroundColor.empty())
            _out << " backgroundColor=\"" << backgroundColor << "\" ";
        if(!backgroundImage.empty())
            _out << " backgroundImage=\"" << backgroundImage << "\" ";
        if(!backgroundPosition.empty())
            _out << " backgroundPosition=\"" << backgroundPosition << "\" ";
        if(!backgroundRepeat.empty())
            _out << " backgroundRepeat=\"" << backgroundRepeat << "\" ";
        if(!border.empty())
            _out << " border=\"" << border << "\" ";
        if(!borderCollapse.empty())
            _out << " borderCollapse=\"" << borderCollapse << "\" ";
        if(!borderColor.empty())
            _out << " borderColor=\"" << borderColor << "\" ";
        if(!borderSpacing.empty())
            _out << " borderSpacing=\"" << borderSpacing << "\" ";
        if(!borderStyle.empty())
            _out << " borderStyle=\"" << borderStyle << "\" ";
        if(!borderTop.empty())
            _out << " borderTop=\"" << borderTop << "\" ";
        if(!borderRight.empty())
            _out << " borderRight=\"" << borderRight << "\" ";
        if(!borderBottom.empty())
            _out << " borderBottom=\"" << borderBottom << "\" ";
        if(!borderLeft.empty())
            _out << " borderLeft=\"" << borderLeft << "\" ";
        if(!borderTopColor.empty())
            _out << " borderTopColor=\"" << borderTopColor << "\" ";
        if(!borderRightColor.empty())
            _out << " borderRightColor=\"" << borderRightColor << "\" ";
        if(!borderBottomColor.empty())
            _out << " borderBottomColor=\"" << borderBottomColor << "\" ";
        if(!borderLeftColor.empty())
            _out << " borderLeftColor=\"" << borderLeftColor << "\" ";
        if(!borderTopStyle.empty())
            _out << " borderTopStyle=\"" << borderTopStyle << "\" ";
        if(!borderRightStyle.empty())
            _out << " borderRightStyle=\"" << borderRightStyle << "\" ";
        if(!borderBottomStyle.empty())
            _out << " borderBottomStyle=\"" << borderBottomStyle << "\" ";
        if(!borderLeftStyle.empty())
            _out << " borderLeftStyle=\"" << borderLeftStyle << "\" ";
        if(!borderTopWidth.empty())
            _out << " borderTopWidth=\"" << borderTopWidth << "\" ";
        if(!borderRightWidth.empty())
            _out << " borderRightWidth=\"" << borderRightWidth << "\" ";
        if(!borderBottomWidth.empty())
            _out << " borderBottomWidth=\"" << borderBottomWidth << "\" ";
        if(!borderLeftWidth.empty())
            _out << " borderLeftWidth=\"" << borderLeftWidth << "\" ";
        if(!borderWidth.empty())
            _out << " borderWidth=\"" << borderWidth << "\" ";
        if(!bottom.empty())
            _out << " bottom=\"" << bottom << "\" ";
        if(!captionSide.empty())
            _out << " captionSide=\"" << captionSide << "\" ";
        if(!clear.empty())
            _out << " clear=\"" << clear << "\" ";
        if(!clip.empty())
            _out << " clip=\"" << clip << "\" ";
        if(!color.empty())
            _out << " color=\"" << color << "\" ";
        if(!content.empty())
            _out << " content=\"" << content << "\" ";
        if(!counterIncrement.empty())
            _out << " counterIncrement=\"" << counterIncrement << "\" ";
        if(!counterReset.empty())
            _out << " counterReset=\"" << counterReset << "\" ";
        if(!cue.empty())
            _out << " cue=\"" << cue << "\" ";
        if(!cueAfter.empty())
            _out << " cueAfter=\"" << cueAfter << "\" ";
        if(!cueBefore.empty())
            _out << " cueBefore=\"" << cueBefore << "\" ";
        if(!cursor.empty())
            _out << " cursor=\"" << cursor << "\" ";
        if(!direction.empty())
            _out << " direction=\"" << direction << "\" ";
        if(!display.empty())
            _out << " display=\"" << display << "\" ";
        if(!elevation.empty())
            _out << " elevation=\"" << elevation << "\" ";
        if(!emptyCells.empty())
            _out << " emptyCells=\"" << emptyCells << "\" ";
        if(!cssFloat.empty())
            _out << " cssFloat=\"" << cssFloat << "\" ";
        if(!font.empty())
            _out << " font=\"" << font << "\" ";
        if(!fontFamily.empty())
            _out << " fontFamily=\"" << fontFamily << "\" ";
        if(!fontSize.empty())
            _out << " fontSize=\"" << fontSize << "\" ";
        if(!fontSizeAdjust.empty())
            _out << " fontSizeAdjust=\"" << fontSizeAdjust << "\" ";
        if(!fontStretch.empty())
            _out << " fontStretch=\"" << fontStretch << "\" ";
        if(!fontStyle.empty())
            _out << " fontStyle=\"" << fontStyle << "\" ";
        if(!fontVariant.empty())
            _out << " fontVariant=\"" << fontVariant << "\" ";
        if(!fontWeight.empty())
            _out << " fontWeight=\"" << fontWeight << "\" ";
        if(!height.empty())
            _out << " height=\"" << height << "\" ";
        if(!left.empty())
            _out << " left=\"" << left << "\" ";
        if(!letterSpacing.empty())
            _out << " letterSpacing=\"" << letterSpacing << "\" ";
        if(!lineHeight.empty())
            _out << " lineHeight=\"" << lineHeight << "\" ";
        if(!listStyle.empty())
            _out << " listStyle=\"" << listStyle << "\" ";
        if(!listStyleImage.empty())
            _out << " listStyleImage=\"" << listStyleImage << "\" ";
        if(!listStylePosition.empty())
            _out << " listStylePosition=\"" << listStylePosition << "\" ";
        if(!listStyleType.empty())
            _out << " listStyleType=\"" << listStyleType << "\" ";
        if(!margin.empty())
            _out << " margin=\"" << margin << "\" ";
        if(!marginTop.empty())
            _out << " marginTop=\"" << marginTop << "\" ";
        if(!marginRight.empty())
            _out << " marginRight=\"" << marginRight << "\" ";
        if(!marginBottom.empty())
            _out << " marginBottom=\"" << marginBottom << "\" ";
        if(!marginLeft.empty())
            _out << " marginLeft=\"" << marginLeft << "\" ";
        if(!markerOffset.empty())
            _out << " markerOffset=\"" << markerOffset << "\" ";
        if(!marks.empty())
            _out << " marks=\"" << marks << "\" ";
        if(!maxHeight.empty())
            _out << " maxHeight=\"" << maxHeight << "\" ";
        if(!maxWidth.empty())
            _out << " maxWidth=\"" << maxWidth << "\" ";
        if(!minHeight.empty())
            _out << " minHeight=\"" << minHeight << "\" ";
        if(!minWidth.empty())
            _out << " minWidth=\"" << minWidth << "\" ";
        if(!orphans.empty())
            _out << " orphans=\"" << orphans << "\" ";
        if(!outline.empty())
            _out << " outline=\"" << outline << "\" ";
        if(!outlineColor.empty())
            _out << " outlineColor=\"" << outlineColor << "\" ";
        if(!outlineStyle.empty())
            _out << " outlineStyle=\"" << outlineStyle << "\" ";
        if(!outlineWidth.empty())
            _out << " outlineWidth=\"" << outlineWidth << "\" ";
        if(!overflow.empty())
            _out << " overflow=\"" << overflow << "\" ";
        if(!padding.empty())
            _out << " padding=\"" << padding << "\" ";
        if(!paddingTop.empty())
            _out << " paddingTop=\"" << paddingTop << "\" ";
        if(!paddingRight.empty())
            _out << " paddingRight=\"" << paddingRight << "\" ";
        if(!paddingBottom.empty())
            _out << " paddingBottom=\"" << paddingBottom << "\" ";
        if(!paddingLeft.empty())
            _out << " paddingLeft=\"" << paddingLeft << "\" ";
        if(!page.empty())
            _out << " page=\"" << page << "\" ";
        if(!pageBreakAfter.empty())
            _out << " pageBreakAfter=\"" << pageBreakAfter << "\" ";
        if(!pageBreakBefore.empty())
            _out << " pageBreakBefore=\"" << pageBreakBefore << "\" ";
        if(!pageBreakInside.empty())
            _out << " pageBreakInside=\"" << pageBreakInside << "\" ";
        if(!pause.empty())
            _out << " pause=\"" << pause << "\" ";
        if(!pauseAfter.empty())
            _out << " pauseAfter=\"" << pauseAfter << "\" ";
        if(!pauseBefore.empty())
            _out << " pauseBefore=\"" << pauseBefore << "\" ";
        if(!pitch.empty())
            _out << " pitch=\"" << pitch << "\" ";
        if(!pitchRange.empty())
            _out << " pitchRange=\"" << pitchRange << "\" ";
        if(!playDuring.empty())
            _out << " playDuring=\"" << playDuring << "\" ";
        if(!position.empty())
            _out << " position=\"" << position << "\" ";
        if(!quotes.empty())
            _out << " quotes=\"" << quotes << "\" ";
        if(!richness.empty())
            _out << " richness=\"" << richness << "\" ";
        if(!right.empty())
            _out << " right=\"" << right << "\" ";
        if(!size.empty())
            _out << " size=\"" << size << "\" ";
        if(!speak.empty())
            _out << " speak=\"" << speak << "\" ";
        if(!speakHeader.empty())
            _out << " speakHeader=\"" << speakHeader << "\" ";
        if(!speakNumeral.empty())
            _out << " speakNumeral=\"" << speakNumeral << "\" ";
        if(!speakPunctuation.empty())
            _out << " speakPunctuation=\"" << speakPunctuation << "\" ";
        if(!speechRate.empty())
            _out << " speechRate=\"" << speechRate << "\" ";
        if(!stress.empty())
            _out << " stress=\"" << stress << "\" ";
        if(!tableLayout.empty())
            _out << " tableLayout=\"" << tableLayout << "\" ";
        if(!textAlign.empty())
            _out << " textAlign=\"" << textAlign << "\" ";
        if(!textDecoration.empty())
            _out << " textDecoration=\"" << textDecoration << "\" ";
        if(!textIndent.empty())
            _out << " textIndent=\"" << textIndent << "\" ";
        if(!textShadow.empty())
            _out << " textShadow=\"" << textShadow << "\" ";
        if(!textTransform.empty())
            _out << " textTransform=\"" << textTransform << "\" ";
        if(!top.empty())
            _out << " top=\"" << top << "\" ";
        if(!unicodeBidi.empty())
            _out << " unicodeBidi=\"" << unicodeBidi << "\" ";
        if(!verticalAlign.empty())
            _out << " verticalAlign=\"" << verticalAlign << "\" ";
        if(!visibility.empty())
            _out << " visibility=\"" << visibility << "\" ";
        if(!voiceFamily.empty())
            _out << " voiceFamily=\"" << voiceFamily << "\" ";
        if(!volume.empty())
            _out << " volume=\"" << volume << "\" ";
        if(!whiteSpace.empty())
            _out << " whiteSpace=\"" << whiteSpace << "\" ";
        if(!widows.empty())
            _out << " widows=\"" << widows << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        if(!wordSpacing.empty())
            _out << " wordSpacing=\"" << wordSpacing << "\" ";
        if(!zIndex.empty())
            _out << " zIndex=\"" << zIndex << "\" ";
        return _out.str();
    }
};

class js_css_CSSStyleSheet : public virtual css::CSSStyleSheet, public js_stylesheets_StyleSheet, public v8_wrapper::Registrator< js_css_CSSStyleSheet > {
public:
    js_css_CSSStyleSheet() {}
    static v8::Handle<v8::Value> static_insertRule(const v8::Arguments& args);
    virtual long unsigned int insertRule(css::DOMString val_rule, long unsigned int val_index);
    static v8::Handle<v8::Value> static_deleteRule(const v8::Arguments& args);
    virtual void deleteRule(long unsigned int val_index);
    static v8::Handle<v8::Value> static_get_ownerRule(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ownerRule(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cssRules(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cssRules(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_stylesheets_StyleSheet::get_fields();
        return _out.str();
    }
};

class js_css_ViewCSS : public virtual css::ViewCSS, public js_views_AbstractView, public v8_wrapper::Registrator< js_css_ViewCSS > {
public:
    js_css_ViewCSS() {}
    static v8::Handle<v8::Value> static_getComputedStyle(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getComputedStyle(v8::Handle<v8::Value> val_elt, css::DOMString val_pseudoElt);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_views_AbstractView::get_fields();
        return _out.str();
    }
};

class js_css_DocumentCSS : public virtual css::DocumentCSS, public js_stylesheets_DocumentStyle, public v8_wrapper::Registrator< js_css_DocumentCSS > {
public:
    js_css_DocumentCSS() {}
    static v8::Handle<v8::Value> static_getOverrideStyle(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getOverrideStyle(v8::Handle<v8::Value> val_elt, css::DOMString val_pseudoElt);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_stylesheets_DocumentStyle::get_fields();
        return _out.str();
    }
};

class js_css_DOMImplementationCSS : public virtual css::DOMImplementationCSS, public js_dom_DOMImplementation, public v8_wrapper::Registrator< js_css_DOMImplementationCSS > {
public:
    js_css_DOMImplementationCSS() {}
    static v8::Handle<v8::Value> static_createCSSStyleSheet(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createCSSStyleSheet(css::DOMString val_title, css::DOMString val_media);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_dom_DOMImplementation::get_fields();
        return _out.str();
    }
};

class js_events_EventException : public virtual events::EventException, public v8_wrapper::Registrator< js_events_EventException > {
public:
    js_events_EventException() {}
    static v8::Handle<v8::Value> static_get_code(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_code(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(code != 0)
            _out << " code=\"" << code << "\" ";
        return _out.str();
    }
};

class js_events_EventTarget : public virtual events::EventTarget, public v8_wrapper::Registrator< js_events_EventTarget > {
public:
    js_events_EventTarget() {}
    static v8::Handle<v8::Value> static_addEventListener(const v8::Arguments& args);
    virtual void addEventListener(events::DOMString val_type, v8::Handle<v8::Value> val_listener, bool val_useCapture);
    static v8::Handle<v8::Value> static_removeEventListener(const v8::Arguments& args);
    virtual void removeEventListener(events::DOMString val_type, v8::Handle<v8::Value> val_listener, bool val_useCapture);
    static v8::Handle<v8::Value> static_dispatchEvent(const v8::Arguments& args);
    virtual bool dispatchEvent(v8::Handle<v8::Value> val_evt);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_events_EventListener : public virtual events::EventListener, public v8_wrapper::Registrator< js_events_EventListener > {
public:
    js_events_EventListener() {}
    static v8::Handle<v8::Value> static_handleEvent(const v8::Arguments& args);
    virtual void handleEvent(v8::Handle<v8::Value> val_evt);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_events_Event : public virtual events::Event, public v8_wrapper::Registrator< js_events_Event > {
public:
    js_events_Event() {}
    static v8::Handle<v8::Value> static_stopPropagation(const v8::Arguments& args);
    virtual void stopPropagation();
    static v8::Handle<v8::Value> static_preventDefault(const v8::Arguments& args);
    virtual void preventDefault();
    static v8::Handle<v8::Value> static_initEvent(const v8::Arguments& args);
    virtual void initEvent(events::DOMString val_eventTypeArg, bool val_canBubbleArg, bool val_cancelableArg);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_currentTarget(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_currentTarget(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_eventPhase(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_eventPhase(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bubbles(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bubbles(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cancelable(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cancelable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_timeStamp(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_timeStamp(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(eventPhase != 0)
            _out << " eventPhase=\"" << eventPhase << "\" ";
        _out << " bubbles=\"" << bubbles << "\" ";
        _out << " cancelable=\"" << cancelable << "\" ";
        return _out.str();
    }
};

class js_events_DocumentEvent : public virtual events::DocumentEvent, public v8_wrapper::Registrator< js_events_DocumentEvent > {
public:
    js_events_DocumentEvent() {}
    static v8::Handle<v8::Value> static_createEvent(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createEvent(events::DOMString val_eventType);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_events_UIEvent : public virtual events::UIEvent, public js_events_Event, public v8_wrapper::Registrator< js_events_UIEvent > {
public:
    js_events_UIEvent() {}
    static v8::Handle<v8::Value> static_initUIEvent(const v8::Arguments& args);
    virtual void initUIEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_viewArg, long int val_detailArg);
    static v8::Handle<v8::Value> static_get_view(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_view(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_detail(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_detail(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(detail != 0)
            _out << " detail=\"" << detail << "\" ";
        _out << js_events_Event::get_fields();
        return _out.str();
    }
};

class js_events_MouseEvent : public virtual events::MouseEvent, public js_events_UIEvent, public v8_wrapper::Registrator< js_events_MouseEvent > {
public:
    js_events_MouseEvent() {}
    static v8::Handle<v8::Value> static_initMouseEvent(const v8::Arguments& args);
    virtual void initMouseEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_viewArg, long int val_detailArg, long int val_screenXArg, long int val_screenYArg, long int val_clientXArg, long int val_clientYArg, bool val_ctrlKeyArg, bool val_altKeyArg, bool val_shiftKeyArg, bool val_metaKeyArg, short unsigned int val_buttonArg, v8::Handle<v8::Value> val_relatedTargetArg);
    static v8::Handle<v8::Value> static_get_screenX(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_screenX(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_screenY(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_screenY(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_clientX(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_clientX(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_clientY(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_clientY(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ctrlKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ctrlKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_shiftKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_shiftKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_altKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_altKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_metaKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_metaKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_button(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_button(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_relatedTarget(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_relatedTarget(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(screenX != 0)
            _out << " screenX=\"" << screenX << "\" ";
        if(screenY != 0)
            _out << " screenY=\"" << screenY << "\" ";
        if(clientX != 0)
            _out << " clientX=\"" << clientX << "\" ";
        if(clientY != 0)
            _out << " clientY=\"" << clientY << "\" ";
        _out << " ctrlKey=\"" << ctrlKey << "\" ";
        _out << " shiftKey=\"" << shiftKey << "\" ";
        _out << " altKey=\"" << altKey << "\" ";
        _out << " metaKey=\"" << metaKey << "\" ";
        if(button != 0)
            _out << " button=\"" << button << "\" ";
        _out << js_events_UIEvent::get_fields();
        return _out.str();
    }
};

class js_events_MutationEvent : public virtual events::MutationEvent, public js_events_Event, public v8_wrapper::Registrator< js_events_MutationEvent > {
public:
    js_events_MutationEvent() {}
    static v8::Handle<v8::Value> static_initMutationEvent(const v8::Arguments& args);
    virtual void initMutationEvent(events::DOMString val_typeArg, bool val_canBubbleArg, bool val_cancelableArg, v8::Handle<v8::Value> val_relatedNodeArg, events::DOMString val_prevValueArg, events::DOMString val_newValueArg, events::DOMString val_attrNameArg, short unsigned int val_attrChangeArg);
    static v8::Handle<v8::Value> static_get_relatedNode(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_relatedNode(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_prevValue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_prevValue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_newValue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_newValue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_attrName(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_attrName(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_attrChange(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_attrChange(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!prevValue.empty())
            _out << " prevValue=\"" << prevValue << "\" ";
        if(!newValue.empty())
            _out << " newValue=\"" << newValue << "\" ";
        if(!attrName.empty())
            _out << " attrName=\"" << attrName << "\" ";
        if(attrChange != 0)
            _out << " attrChange=\"" << attrChange << "\" ";
        _out << js_events_Event::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLCollection : public virtual html2::HTMLCollection, public v8_wrapper::Registrator< js_html2_HTMLCollection > {
public:
    js_html2_HTMLCollection() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_namedItem(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> namedItem(html2::DOMString val_name);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_html2_HTMLOptionsCollection : public virtual html2::HTMLOptionsCollection, public v8_wrapper::Registrator< js_html2_HTMLOptionsCollection > {
public:
    js_html2_HTMLOptionsCollection() {}
    static v8::Handle<v8::Value> static_item(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> item(long unsigned int val_index);
    static v8::Handle<v8::Value> static_namedItem(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> namedItem(html2::DOMString val_name);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        return _out.str();
    }
};

class js_html2_HTMLDocument : public virtual html2::HTMLDocument, public js_dom_Document, public v8_wrapper::Registrator< js_html2_HTMLDocument > {
public:
    js_html2_HTMLDocument() {}
    static v8::Handle<v8::Value> static_open(const v8::Arguments& args);
    virtual void open();
    static v8::Handle<v8::Value> static_close(const v8::Arguments& args);
    virtual void close();
    static v8::Handle<v8::Value> static_write(const v8::Arguments& args);
    virtual void write(html2::DOMString val_text);
    static v8::Handle<v8::Value> static_writeln(const v8::Arguments& args);
    virtual void writeln(html2::DOMString val_text);
    static v8::Handle<v8::Value> static_getElementsByName(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> getElementsByName(html2::DOMString val_elementName);
    static v8::Handle<v8::Value> static_get_title(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_title(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_referrer(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_referrer(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_domain(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_domain(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_URL(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_URL(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_body(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_body(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_images(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_images(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_applets(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_applets(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_links(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_links(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_forms(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_forms(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_anchors(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_anchors(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cookie(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cookie(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!title.empty())
            _out << " title=\"" << title << "\" ";
        if(!referrer.empty())
            _out << " referrer=\"" << referrer << "\" ";
        if(!domain.empty())
            _out << " domain=\"" << domain << "\" ";
        if(!URL.empty())
            _out << " URL=\"" << URL << "\" ";
        if(!cookie.empty())
            _out << " cookie=\"" << cookie << "\" ";
        _out << js_dom_Document::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLElement : public virtual html2::HTMLElement, public js_dom_Element, public v8_wrapper::Registrator< js_html2_HTMLElement > {
public:
    js_html2_HTMLElement() {}
    static v8::Handle<v8::Value> static_get_id(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_id(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_title(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_title(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_lang(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_lang(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_dir(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_dir(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_className(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_className(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!id.empty())
            _out << " id=\"" << id << "\" ";
        if(!title.empty())
            _out << " title=\"" << title << "\" ";
        if(!lang.empty())
            _out << " lang=\"" << lang << "\" ";
        if(!dir.empty())
            _out << " dir=\"" << dir << "\" ";
        if(!className.empty())
            _out << " className=\"" << className << "\" ";
        _out << js_dom_Element::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLHtmlElement : public virtual html2::HTMLHtmlElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLHtmlElement > {
public:
    js_html2_HTMLHtmlElement() {}
    static v8::Handle<v8::Value> static_get_version(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_version(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!version.empty())
            _out << " version=\"" << version << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLHeadElement : public virtual html2::HTMLHeadElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLHeadElement > {
public:
    js_html2_HTMLHeadElement() {}
    static v8::Handle<v8::Value> static_get_profile(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_profile(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!profile.empty())
            _out << " profile=\"" << profile << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLLinkElement : public virtual html2::HTMLLinkElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLLinkElement > {
public:
    js_html2_HTMLLinkElement() {}
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_charset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_charset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_hreflang(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_hreflang(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_media(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_media(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rel(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rel(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rev(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rev(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " disabled=\"" << disabled << "\" ";
        if(!charset.empty())
            _out << " charset=\"" << charset << "\" ";
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        if(!hreflang.empty())
            _out << " hreflang=\"" << hreflang << "\" ";
        if(!media.empty())
            _out << " media=\"" << media << "\" ";
        if(!rel.empty())
            _out << " rel=\"" << rel << "\" ";
        if(!rev.empty())
            _out << " rev=\"" << rev << "\" ";
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTitleElement : public virtual html2::HTMLTitleElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTitleElement > {
public:
    js_html2_HTMLTitleElement() {}
    static v8::Handle<v8::Value> static_get_text(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_text(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!text.empty())
            _out << " text=\"" << text << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLMetaElement : public virtual html2::HTMLMetaElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLMetaElement > {
public:
    js_html2_HTMLMetaElement() {}
    static v8::Handle<v8::Value> static_get_content(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_content(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_httpEquiv(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_httpEquiv(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_scheme(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_scheme(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!content.empty())
            _out << " content=\"" << content << "\" ";
        if(!httpEquiv.empty())
            _out << " httpEquiv=\"" << httpEquiv << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!scheme.empty())
            _out << " scheme=\"" << scheme << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLBaseElement : public virtual html2::HTMLBaseElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLBaseElement > {
public:
    js_html2_HTMLBaseElement() {}
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLIsIndexElement : public virtual html2::HTMLIsIndexElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLIsIndexElement > {
public:
    js_html2_HTMLIsIndexElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_prompt(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_prompt(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!prompt.empty())
            _out << " prompt=\"" << prompt << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLStyleElement : public virtual html2::HTMLStyleElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLStyleElement > {
public:
    js_html2_HTMLStyleElement() {}
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_media(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_media(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " disabled=\"" << disabled << "\" ";
        if(!media.empty())
            _out << " media=\"" << media << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLBodyElement : public virtual html2::HTMLBodyElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLBodyElement > {
public:
    js_html2_HTMLBodyElement() {}
    static v8::Handle<v8::Value> static_get_aLink(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_aLink(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_background(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_background(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bgColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bgColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_link(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_link(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_text(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_text(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vLink(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vLink(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!aLink.empty())
            _out << " aLink=\"" << aLink << "\" ";
        if(!background.empty())
            _out << " background=\"" << background << "\" ";
        if(!bgColor.empty())
            _out << " bgColor=\"" << bgColor << "\" ";
        if(!link.empty())
            _out << " link=\"" << link << "\" ";
        if(!text.empty())
            _out << " text=\"" << text << "\" ";
        if(!vLink.empty())
            _out << " vLink=\"" << vLink << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLFormElement : public virtual html2::HTMLFormElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLFormElement > {
public:
    js_html2_HTMLFormElement() {}
    static v8::Handle<v8::Value> static_submit(const v8::Arguments& args);
    virtual void submit();
    static v8::Handle<v8::Value> static_reset(const v8::Arguments& args);
    virtual void reset();
    static v8::Handle<v8::Value> static_get_elements(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_elements(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_acceptCharset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_acceptCharset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_action(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_action(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_enctype(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_enctype(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_method(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_method(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!acceptCharset.empty())
            _out << " acceptCharset=\"" << acceptCharset << "\" ";
        if(!action.empty())
            _out << " action=\"" << action << "\" ";
        if(!enctype.empty())
            _out << " enctype=\"" << enctype << "\" ";
        if(!method.empty())
            _out << " method=\"" << method << "\" ";
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLSelectElement : public virtual html2::HTMLSelectElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLSelectElement > {
public:
    js_html2_HTMLSelectElement() {}
    static v8::Handle<v8::Value> static_add(const v8::Arguments& args);
    virtual void add(v8::Handle<v8::Value> val_element, v8::Handle<v8::Value> val_before);
    static v8::Handle<v8::Value> static_remove(const v8::Arguments& args);
    virtual void remove(long int val_index);
    static v8::Handle<v8::Value> static_blur(const v8::Arguments& args);
    virtual void blur();
    static v8::Handle<v8::Value> static_focus(const v8::Arguments& args);
    virtual void focus();
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_selectedIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_selectedIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_length(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_length(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_options(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_options(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_multiple(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_multiple(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(selectedIndex != 0)
            _out << " selectedIndex=\"" << selectedIndex << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        if(length != 0)
            _out << " length=\"" << length << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        _out << " multiple=\"" << multiple << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(size != 0)
            _out << " size=\"" << size << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLOptGroupElement : public virtual html2::HTMLOptGroupElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLOptGroupElement > {
public:
    js_html2_HTMLOptGroupElement() {}
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_label(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_label(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " disabled=\"" << disabled << "\" ";
        if(!label.empty())
            _out << " label=\"" << label << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLOptionElement : public virtual html2::HTMLOptionElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLOptionElement > {
public:
    js_html2_HTMLOptionElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_defaultSelected(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defaultSelected(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_text(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_text(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_index(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_index(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_label(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_label(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_selected(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_selected(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " defaultSelected=\"" << defaultSelected << "\" ";
        if(!text.empty())
            _out << " text=\"" << text << "\" ";
        if(index != 0)
            _out << " index=\"" << index << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        if(!label.empty())
            _out << " label=\"" << label << "\" ";
        _out << " selected=\"" << selected << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLInputElement : public virtual html2::HTMLInputElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLInputElement > {
public:
    js_html2_HTMLInputElement() {}
    static v8::Handle<v8::Value> static_blur(const v8::Arguments& args);
    virtual void blur();
    static v8::Handle<v8::Value> static_focus(const v8::Arguments& args);
    virtual void focus();
    static v8::Handle<v8::Value> static_select(const v8::Arguments& args);
    virtual void select();
    static v8::Handle<v8::Value> static_click(const v8::Arguments& args);
    virtual void click();
    static v8::Handle<v8::Value> static_get_defaultValue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defaultValue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_defaultChecked(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defaultChecked(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accept(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accept(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_alt(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_alt(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_checked(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_checked(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_maxLength(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_maxLength(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_readOnly(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_readOnly(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_src(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_src(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_useMap(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_useMap(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!defaultValue.empty())
            _out << " defaultValue=\"" << defaultValue << "\" ";
        _out << " defaultChecked=\"" << defaultChecked << "\" ";
        if(!accept.empty())
            _out << " accept=\"" << accept << "\" ";
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!alt.empty())
            _out << " alt=\"" << alt << "\" ";
        _out << " checked=\"" << checked << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        if(maxLength != 0)
            _out << " maxLength=\"" << maxLength << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        _out << " readOnly=\"" << readOnly << "\" ";
        if(size != 0)
            _out << " size=\"" << size << "\" ";
        if(!src.empty())
            _out << " src=\"" << src << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(!useMap.empty())
            _out << " useMap=\"" << useMap << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTextAreaElement : public virtual html2::HTMLTextAreaElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTextAreaElement > {
public:
    js_html2_HTMLTextAreaElement() {}
    static v8::Handle<v8::Value> static_blur(const v8::Arguments& args);
    virtual void blur();
    static v8::Handle<v8::Value> static_focus(const v8::Arguments& args);
    virtual void focus();
    static v8::Handle<v8::Value> static_select(const v8::Arguments& args);
    virtual void select();
    static v8::Handle<v8::Value> static_get_defaultValue(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defaultValue(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cols(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cols(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_readOnly(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_readOnly(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rows(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rows(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!defaultValue.empty())
            _out << " defaultValue=\"" << defaultValue << "\" ";
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(cols != 0)
            _out << " cols=\"" << cols << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        _out << " readOnly=\"" << readOnly << "\" ";
        if(rows != 0)
            _out << " rows=\"" << rows << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLButtonElement : public virtual html2::HTMLButtonElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLButtonElement > {
public:
    js_html2_HTMLButtonElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_disabled(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_disabled(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        _out << " disabled=\"" << disabled << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLLabelElement : public virtual html2::HTMLLabelElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLLabelElement > {
public:
    js_html2_HTMLLabelElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_htmlFor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_htmlFor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(!htmlFor.empty())
            _out << " htmlFor=\"" << htmlFor << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLFieldSetElement : public virtual html2::HTMLFieldSetElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLFieldSetElement > {
public:
    js_html2_HTMLFieldSetElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLLegendElement : public virtual html2::HTMLLegendElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLLegendElement > {
public:
    js_html2_HTMLLegendElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLUListElement : public virtual html2::HTMLUListElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLUListElement > {
public:
    js_html2_HTMLUListElement() {}
    static v8::Handle<v8::Value> static_get_compact(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_compact(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " compact=\"" << compact << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLOListElement : public virtual html2::HTMLOListElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLOListElement > {
public:
    js_html2_HTMLOListElement() {}
    static v8::Handle<v8::Value> static_get_compact(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_compact(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_start(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_start(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " compact=\"" << compact << "\" ";
        if(start != 0)
            _out << " start=\"" << start << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLDListElement : public virtual html2::HTMLDListElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLDListElement > {
public:
    js_html2_HTMLDListElement() {}
    static v8::Handle<v8::Value> static_get_compact(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_compact(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " compact=\"" << compact << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLDirectoryElement : public virtual html2::HTMLDirectoryElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLDirectoryElement > {
public:
    js_html2_HTMLDirectoryElement() {}
    static v8::Handle<v8::Value> static_get_compact(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_compact(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " compact=\"" << compact << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLMenuElement : public virtual html2::HTMLMenuElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLMenuElement > {
public:
    js_html2_HTMLMenuElement() {}
    static v8::Handle<v8::Value> static_get_compact(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_compact(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        _out << " compact=\"" << compact << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLLIElement : public virtual html2::HTMLLIElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLLIElement > {
public:
    js_html2_HTMLLIElement() {}
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(value != 0)
            _out << " value=\"" << value << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLDivElement : public virtual html2::HTMLDivElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLDivElement > {
public:
    js_html2_HTMLDivElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLParagraphElement : public virtual html2::HTMLParagraphElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLParagraphElement > {
public:
    js_html2_HTMLParagraphElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLHeadingElement : public virtual html2::HTMLHeadingElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLHeadingElement > {
public:
    js_html2_HTMLHeadingElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLQuoteElement : public virtual html2::HTMLQuoteElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLQuoteElement > {
public:
    js_html2_HTMLQuoteElement() {}
    static v8::Handle<v8::Value> static_get_cite(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cite(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!cite.empty())
            _out << " cite=\"" << cite << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLPreElement : public virtual html2::HTMLPreElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLPreElement > {
public:
    js_html2_HTMLPreElement() {}
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(width != 0)
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLBRElement : public virtual html2::HTMLBRElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLBRElement > {
public:
    js_html2_HTMLBRElement() {}
    static v8::Handle<v8::Value> static_get_clear(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_clear(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!clear.empty())
            _out << " clear=\"" << clear << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLBaseFontElement : public virtual html2::HTMLBaseFontElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLBaseFontElement > {
public:
    js_html2_HTMLBaseFontElement() {}
    static v8::Handle<v8::Value> static_get_color(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_color(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_face(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_face(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!color.empty())
            _out << " color=\"" << color << "\" ";
        if(!face.empty())
            _out << " face=\"" << face << "\" ";
        if(size != 0)
            _out << " size=\"" << size << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLFontElement : public virtual html2::HTMLFontElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLFontElement > {
public:
    js_html2_HTMLFontElement() {}
    static v8::Handle<v8::Value> static_get_color(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_color(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_face(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_face(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!color.empty())
            _out << " color=\"" << color << "\" ";
        if(!face.empty())
            _out << " face=\"" << face << "\" ";
        if(!size.empty())
            _out << " size=\"" << size << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLHRElement : public virtual html2::HTMLHRElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLHRElement > {
public:
    js_html2_HTMLHRElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_noShade(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_noShade(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_size(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_size(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << " noShade=\"" << noShade << "\" ";
        if(!size.empty())
            _out << " size=\"" << size << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLModElement : public virtual html2::HTMLModElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLModElement > {
public:
    js_html2_HTMLModElement() {}
    static v8::Handle<v8::Value> static_get_cite(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cite(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_dateTime(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_dateTime(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!cite.empty())
            _out << " cite=\"" << cite << "\" ";
        if(!dateTime.empty())
            _out << " dateTime=\"" << dateTime << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLAnchorElement : public virtual html2::HTMLAnchorElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLAnchorElement > {
public:
    js_html2_HTMLAnchorElement() {}
    static v8::Handle<v8::Value> static_blur(const v8::Arguments& args);
    virtual void blur();
    static v8::Handle<v8::Value> static_focus(const v8::Arguments& args);
    virtual void focus();
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_charset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_charset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_coords(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_coords(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_hreflang(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_hreflang(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rel(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rel(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rev(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rev(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_shape(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_shape(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(!charset.empty())
            _out << " charset=\"" << charset << "\" ";
        if(!coords.empty())
            _out << " coords=\"" << coords << "\" ";
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        if(!hreflang.empty())
            _out << " hreflang=\"" << hreflang << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!rel.empty())
            _out << " rel=\"" << rel << "\" ";
        if(!rev.empty())
            _out << " rev=\"" << rev << "\" ";
        if(!shape.empty())
            _out << " shape=\"" << shape << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLImageElement : public virtual html2::HTMLImageElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLImageElement > {
public:
    js_html2_HTMLImageElement() {}
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_alt(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_alt(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_border(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_border(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_hspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_hspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_isMap(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_isMap(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_longDesc(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_longDesc(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_src(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_src(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_useMap(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_useMap(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!alt.empty())
            _out << " alt=\"" << alt << "\" ";
        if(!border.empty())
            _out << " border=\"" << border << "\" ";
        if(height != 0)
            _out << " height=\"" << height << "\" ";
        if(hspace != 0)
            _out << " hspace=\"" << hspace << "\" ";
        _out << " isMap=\"" << isMap << "\" ";
        if(!longDesc.empty())
            _out << " longDesc=\"" << longDesc << "\" ";
        if(!src.empty())
            _out << " src=\"" << src << "\" ";
        if(!useMap.empty())
            _out << " useMap=\"" << useMap << "\" ";
        if(vspace != 0)
            _out << " vspace=\"" << vspace << "\" ";
        if(width != 0)
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLObjectElement : public virtual html2::HTMLObjectElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLObjectElement > {
public:
    js_html2_HTMLObjectElement() {}
    static v8::Handle<v8::Value> static_get_form(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_form(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_code(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_code(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_archive(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_archive(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_border(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_border(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_codeBase(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_codeBase(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_codeType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_codeType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_data(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_data(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_declare(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_declare(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_hspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_hspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_standby(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_standby(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_useMap(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_useMap(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_contentDocument(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_contentDocument(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!code.empty())
            _out << " code=\"" << code << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!archive.empty())
            _out << " archive=\"" << archive << "\" ";
        if(!border.empty())
            _out << " border=\"" << border << "\" ";
        if(!codeBase.empty())
            _out << " codeBase=\"" << codeBase << "\" ";
        if(!codeType.empty())
            _out << " codeType=\"" << codeType << "\" ";
        if(!data.empty())
            _out << " data=\"" << data << "\" ";
        _out << " declare=\"" << declare << "\" ";
        if(!height.empty())
            _out << " height=\"" << height << "\" ";
        if(hspace != 0)
            _out << " hspace=\"" << hspace << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!standby.empty())
            _out << " standby=\"" << standby << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(!useMap.empty())
            _out << " useMap=\"" << useMap << "\" ";
        if(vspace != 0)
            _out << " vspace=\"" << vspace << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLParamElement : public virtual html2::HTMLParamElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLParamElement > {
public:
    js_html2_HTMLParamElement() {}
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_value(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_value(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_valueType(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_valueType(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        if(!value.empty())
            _out << " value=\"" << value << "\" ";
        if(!valueType.empty())
            _out << " valueType=\"" << valueType << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLAppletElement : public virtual html2::HTMLAppletElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLAppletElement > {
public:
    js_html2_HTMLAppletElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_alt(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_alt(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_archive(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_archive(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_code(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_code(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_codeBase(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_codeBase(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_hspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_hspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_object(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_object(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vspace(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vspace(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!alt.empty())
            _out << " alt=\"" << alt << "\" ";
        if(!archive.empty())
            _out << " archive=\"" << archive << "\" ";
        if(!code.empty())
            _out << " code=\"" << code << "\" ";
        if(!codeBase.empty())
            _out << " codeBase=\"" << codeBase << "\" ";
        if(!height.empty())
            _out << " height=\"" << height << "\" ";
        if(hspace != 0)
            _out << " hspace=\"" << hspace << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!object.empty())
            _out << " object=\"" << object << "\" ";
        if(vspace != 0)
            _out << " vspace=\"" << vspace << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLMapElement : public virtual html2::HTMLMapElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLMapElement > {
public:
    js_html2_HTMLMapElement() {}
    static v8::Handle<v8::Value> static_get_areas(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_areas(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLAreaElement : public virtual html2::HTMLAreaElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLAreaElement > {
public:
    js_html2_HTMLAreaElement() {}
    static v8::Handle<v8::Value> static_get_accessKey(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_accessKey(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_alt(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_alt(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_coords(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_coords(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_href(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_href(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_noHref(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_noHref(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_shape(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_shape(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tabIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tabIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_target(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_target(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!accessKey.empty())
            _out << " accessKey=\"" << accessKey << "\" ";
        if(!alt.empty())
            _out << " alt=\"" << alt << "\" ";
        if(!coords.empty())
            _out << " coords=\"" << coords << "\" ";
        if(!href.empty())
            _out << " href=\"" << href << "\" ";
        _out << " noHref=\"" << noHref << "\" ";
        if(!shape.empty())
            _out << " shape=\"" << shape << "\" ";
        if(tabIndex != 0)
            _out << " tabIndex=\"" << tabIndex << "\" ";
        if(!target.empty())
            _out << " target=\"" << target << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLScriptElement : public virtual html2::HTMLScriptElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLScriptElement > {
public:
    js_html2_HTMLScriptElement() {}
    static v8::Handle<v8::Value> static_get_text(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_text(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_htmlFor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_htmlFor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_event(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_event(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_charset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_charset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_defer(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_defer(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_src(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_src(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_type(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_type(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!text.empty())
            _out << " text=\"" << text << "\" ";
        if(!htmlFor.empty())
            _out << " htmlFor=\"" << htmlFor << "\" ";
        if(!event.empty())
            _out << " event=\"" << event << "\" ";
        if(!charset.empty())
            _out << " charset=\"" << charset << "\" ";
        _out << " defer=\"" << defer << "\" ";
        if(!src.empty())
            _out << " src=\"" << src << "\" ";
        if(!type.empty())
            _out << " type=\"" << type << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableElement : public virtual html2::HTMLTableElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableElement > {
public:
    js_html2_HTMLTableElement() {}
    static v8::Handle<v8::Value> static_createTHead(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createTHead();
    static v8::Handle<v8::Value> static_deleteTHead(const v8::Arguments& args);
    virtual void deleteTHead();
    static v8::Handle<v8::Value> static_createTFoot(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createTFoot();
    static v8::Handle<v8::Value> static_deleteTFoot(const v8::Arguments& args);
    virtual void deleteTFoot();
    static v8::Handle<v8::Value> static_createCaption(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createCaption();
    static v8::Handle<v8::Value> static_deleteCaption(const v8::Arguments& args);
    virtual void deleteCaption();
    static v8::Handle<v8::Value> static_insertRow(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> insertRow(long int val_index);
    static v8::Handle<v8::Value> static_deleteRow(const v8::Arguments& args);
    virtual void deleteRow(long int val_index);
    static v8::Handle<v8::Value> static_get_caption(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_caption(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tHead(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tHead(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tFoot(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tFoot(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rows(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rows(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_tBodies(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_tBodies(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bgColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bgColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_border(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_border(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cellPadding(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cellPadding(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cellSpacing(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cellSpacing(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_frame(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_frame(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rules(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rules(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_summary(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_summary(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!bgColor.empty())
            _out << " bgColor=\"" << bgColor << "\" ";
        if(!border.empty())
            _out << " border=\"" << border << "\" ";
        if(!cellPadding.empty())
            _out << " cellPadding=\"" << cellPadding << "\" ";
        if(!cellSpacing.empty())
            _out << " cellSpacing=\"" << cellSpacing << "\" ";
        if(!frame.empty())
            _out << " frame=\"" << frame << "\" ";
        if(!rules.empty())
            _out << " rules=\"" << rules << "\" ";
        if(!summary.empty())
            _out << " summary=\"" << summary << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableCaptionElement : public virtual html2::HTMLTableCaptionElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableCaptionElement > {
public:
    js_html2_HTMLTableCaptionElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableColElement : public virtual html2::HTMLTableColElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableColElement > {
public:
    js_html2_HTMLTableColElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_chOff(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_chOff(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_span(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_span(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!ch.empty())
            _out << " ch=\"" << ch << "\" ";
        if(!chOff.empty())
            _out << " chOff=\"" << chOff << "\" ";
        if(span != 0)
            _out << " span=\"" << span << "\" ";
        if(!vAlign.empty())
            _out << " vAlign=\"" << vAlign << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableSectionElement : public virtual html2::HTMLTableSectionElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableSectionElement > {
public:
    js_html2_HTMLTableSectionElement() {}
    static v8::Handle<v8::Value> static_insertRow(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> insertRow(long int val_index);
    static v8::Handle<v8::Value> static_deleteRow(const v8::Arguments& args);
    virtual void deleteRow(long int val_index);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_chOff(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_chOff(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rows(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rows(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!ch.empty())
            _out << " ch=\"" << ch << "\" ";
        if(!chOff.empty())
            _out << " chOff=\"" << chOff << "\" ";
        if(!vAlign.empty())
            _out << " vAlign=\"" << vAlign << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableRowElement : public virtual html2::HTMLTableRowElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableRowElement > {
public:
    js_html2_HTMLTableRowElement() {}
    static v8::Handle<v8::Value> static_insertCell(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> insertCell(long int val_index);
    static v8::Handle<v8::Value> static_deleteCell(const v8::Arguments& args);
    virtual void deleteCell(long int val_index);
    static v8::Handle<v8::Value> static_get_rowIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rowIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_sectionRowIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_sectionRowIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_cells(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cells(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bgColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bgColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_chOff(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_chOff(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(rowIndex != 0)
            _out << " rowIndex=\"" << rowIndex << "\" ";
        if(sectionRowIndex != 0)
            _out << " sectionRowIndex=\"" << sectionRowIndex << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!bgColor.empty())
            _out << " bgColor=\"" << bgColor << "\" ";
        if(!ch.empty())
            _out << " ch=\"" << ch << "\" ";
        if(!chOff.empty())
            _out << " chOff=\"" << chOff << "\" ";
        if(!vAlign.empty())
            _out << " vAlign=\"" << vAlign << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLTableCellElement : public virtual html2::HTMLTableCellElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLTableCellElement > {
public:
    js_html2_HTMLTableCellElement() {}
    static v8::Handle<v8::Value> static_get_cellIndex(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cellIndex(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_abbr(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_abbr(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_axis(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_axis(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_bgColor(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_bgColor(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_ch(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_ch(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_chOff(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_chOff(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_colSpan(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_colSpan(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_headers(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_headers(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_noWrap(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_noWrap(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rowSpan(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rowSpan(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_scope(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_scope(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_vAlign(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_vAlign(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(cellIndex != 0)
            _out << " cellIndex=\"" << cellIndex << "\" ";
        if(!abbr.empty())
            _out << " abbr=\"" << abbr << "\" ";
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!axis.empty())
            _out << " axis=\"" << axis << "\" ";
        if(!bgColor.empty())
            _out << " bgColor=\"" << bgColor << "\" ";
        if(!ch.empty())
            _out << " ch=\"" << ch << "\" ";
        if(!chOff.empty())
            _out << " chOff=\"" << chOff << "\" ";
        if(colSpan != 0)
            _out << " colSpan=\"" << colSpan << "\" ";
        if(!headers.empty())
            _out << " headers=\"" << headers << "\" ";
        if(!height.empty())
            _out << " height=\"" << height << "\" ";
        _out << " noWrap=\"" << noWrap << "\" ";
        if(rowSpan != 0)
            _out << " rowSpan=\"" << rowSpan << "\" ";
        if(!scope.empty())
            _out << " scope=\"" << scope << "\" ";
        if(!vAlign.empty())
            _out << " vAlign=\"" << vAlign << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLFrameSetElement : public virtual html2::HTMLFrameSetElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLFrameSetElement > {
public:
    js_html2_HTMLFrameSetElement() {}
    static v8::Handle<v8::Value> static_get_cols(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_cols(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_rows(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_rows(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!cols.empty())
            _out << " cols=\"" << cols << "\" ";
        if(!rows.empty())
            _out << " rows=\"" << rows << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLFrameElement : public virtual html2::HTMLFrameElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLFrameElement > {
public:
    js_html2_HTMLFrameElement() {}
    static v8::Handle<v8::Value> static_get_frameBorder(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_frameBorder(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_longDesc(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_longDesc(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginHeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginHeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_noResize(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_noResize(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_scrolling(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_scrolling(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_src(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_src(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_contentDocument(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_contentDocument(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!frameBorder.empty())
            _out << " frameBorder=\"" << frameBorder << "\" ";
        if(!longDesc.empty())
            _out << " longDesc=\"" << longDesc << "\" ";
        if(!marginHeight.empty())
            _out << " marginHeight=\"" << marginHeight << "\" ";
        if(!marginWidth.empty())
            _out << " marginWidth=\"" << marginWidth << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        _out << " noResize=\"" << noResize << "\" ";
        if(!scrolling.empty())
            _out << " scrolling=\"" << scrolling << "\" ";
        if(!src.empty())
            _out << " src=\"" << src << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_html2_HTMLIFrameElement : public virtual html2::HTMLIFrameElement, public js_html2_HTMLElement, public v8_wrapper::Registrator< js_html2_HTMLIFrameElement > {
public:
    js_html2_HTMLIFrameElement() {}
    static v8::Handle<v8::Value> static_get_align(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_align(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_frameBorder(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_frameBorder(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_height(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_height(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_longDesc(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_longDesc(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginHeight(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginHeight(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_marginWidth(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_marginWidth(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_name(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_name(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_scrolling(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_scrolling(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_src(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_src(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_width(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_width(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_contentDocument(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_contentDocument(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(!align.empty())
            _out << " align=\"" << align << "\" ";
        if(!frameBorder.empty())
            _out << " frameBorder=\"" << frameBorder << "\" ";
        if(!height.empty())
            _out << " height=\"" << height << "\" ";
        if(!longDesc.empty())
            _out << " longDesc=\"" << longDesc << "\" ";
        if(!marginHeight.empty())
            _out << " marginHeight=\"" << marginHeight << "\" ";
        if(!marginWidth.empty())
            _out << " marginWidth=\"" << marginWidth << "\" ";
        if(!name.empty())
            _out << " name=\"" << name << "\" ";
        if(!scrolling.empty())
            _out << " scrolling=\"" << scrolling << "\" ";
        if(!src.empty())
            _out << " src=\"" << src << "\" ";
        if(!width.empty())
            _out << " width=\"" << width << "\" ";
        _out << js_html2_HTMLElement::get_fields();
        return _out.str();
    }
};

class js_ranges_RangeException : public virtual ranges::RangeException, public v8_wrapper::Registrator< js_ranges_RangeException > {
public:
    js_ranges_RangeException() {}
    static v8::Handle<v8::Value> static_get_code(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_code(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(code != 0)
            _out << " code=\"" << code << "\" ";
        return _out.str();
    }
};

class js_ranges_Range : public virtual ranges::Range, public v8_wrapper::Registrator< js_ranges_Range > {
public:
    js_ranges_Range() {}
    static v8::Handle<v8::Value> static_setStart(const v8::Arguments& args);
    virtual void setStart(v8::Handle<v8::Value> val_refNode, long int val_offset);
    static v8::Handle<v8::Value> static_setEnd(const v8::Arguments& args);
    virtual void setEnd(v8::Handle<v8::Value> val_refNode, long int val_offset);
    static v8::Handle<v8::Value> static_setStartBefore(const v8::Arguments& args);
    virtual void setStartBefore(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_setStartAfter(const v8::Arguments& args);
    virtual void setStartAfter(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_setEndBefore(const v8::Arguments& args);
    virtual void setEndBefore(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_setEndAfter(const v8::Arguments& args);
    virtual void setEndAfter(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_collapse(const v8::Arguments& args);
    virtual void collapse(bool val_toStart);
    static v8::Handle<v8::Value> static_selectNode(const v8::Arguments& args);
    virtual void selectNode(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_selectNodeContents(const v8::Arguments& args);
    virtual void selectNodeContents(v8::Handle<v8::Value> val_refNode);
    static v8::Handle<v8::Value> static_compareBoundaryPoints(const v8::Arguments& args);
    virtual short int compareBoundaryPoints(short unsigned int val_how, v8::Handle<v8::Value> val_sourceRange);
    static v8::Handle<v8::Value> static_deleteContents(const v8::Arguments& args);
    virtual void deleteContents();
    static v8::Handle<v8::Value> static_extractContents(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> extractContents();
    static v8::Handle<v8::Value> static_cloneContents(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> cloneContents();
    static v8::Handle<v8::Value> static_insertNode(const v8::Arguments& args);
    virtual void insertNode(v8::Handle<v8::Value> val_newNode);
    static v8::Handle<v8::Value> static_surroundContents(const v8::Arguments& args);
    virtual void surroundContents(v8::Handle<v8::Value> val_newParent);
    static v8::Handle<v8::Value> static_cloneRange(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> cloneRange();
    static v8::Handle<v8::Value> static_toString(const v8::Arguments& args);
    virtual ranges::DOMString toString();
    static v8::Handle<v8::Value> static_detach(const v8::Arguments& args);
    virtual void detach();
    static v8::Handle<v8::Value> static_get_startContainer(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_startContainer(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_startOffset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_startOffset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_endContainer(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_endContainer(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_endOffset(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_endOffset(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_collapsed(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_collapsed(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_commonAncestorContainer(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_commonAncestorContainer(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(startOffset != 0)
            _out << " startOffset=\"" << startOffset << "\" ";
        if(endOffset != 0)
            _out << " endOffset=\"" << endOffset << "\" ";
        _out << " collapsed=\"" << collapsed << "\" ";
        return _out.str();
    }
};

class js_ranges_DocumentRange : public virtual ranges::DocumentRange, public v8_wrapper::Registrator< js_ranges_DocumentRange > {
public:
    js_ranges_DocumentRange() {}
    static v8::Handle<v8::Value> static_createRange(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createRange();

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_traversal_NodeIterator : public virtual traversal::NodeIterator, public v8_wrapper::Registrator< js_traversal_NodeIterator > {
public:
    js_traversal_NodeIterator() {}
    static v8::Handle<v8::Value> static_nextNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> nextNode();
    static v8::Handle<v8::Value> static_previousNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> previousNode();
    static v8::Handle<v8::Value> static_detach(const v8::Arguments& args);
    virtual void detach();
    static v8::Handle<v8::Value> static_get_root(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_root(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_whatToShow(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_whatToShow(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_filter(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_filter(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_expandEntityReferences(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_expandEntityReferences(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(whatToShow != 0)
            _out << " whatToShow=\"" << whatToShow << "\" ";
        _out << " expandEntityReferences=\"" << expandEntityReferences << "\" ";
        return _out.str();
    }
};

class js_traversal_NodeFilter : public virtual traversal::NodeFilter, public v8_wrapper::Registrator< js_traversal_NodeFilter > {
public:
    js_traversal_NodeFilter() {}
    static v8::Handle<v8::Value> static_acceptNode(const v8::Arguments& args);
    virtual short int acceptNode(v8::Handle<v8::Value> val_n);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

class js_traversal_TreeWalker : public virtual traversal::TreeWalker, public v8_wrapper::Registrator< js_traversal_TreeWalker > {
public:
    js_traversal_TreeWalker() {}
    static v8::Handle<v8::Value> static_parentNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> parentNode();
    static v8::Handle<v8::Value> static_firstChild(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> firstChild();
    static v8::Handle<v8::Value> static_lastChild(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> lastChild();
    static v8::Handle<v8::Value> static_previousSibling(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> previousSibling();
    static v8::Handle<v8::Value> static_nextSibling(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> nextSibling();
    static v8::Handle<v8::Value> static_previousNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> previousNode();
    static v8::Handle<v8::Value> static_nextNode(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> nextNode();
    static v8::Handle<v8::Value> static_get_root(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_root(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_whatToShow(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_whatToShow(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_filter(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_filter(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_expandEntityReferences(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_expandEntityReferences(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
    static v8::Handle<v8::Value> static_get_currentNode(v8::Local<v8::String> property, const v8::AccessorInfo& info);
    static void static_set_currentNode(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        if(whatToShow != 0)
            _out << " whatToShow=\"" << whatToShow << "\" ";
        _out << " expandEntityReferences=\"" << expandEntityReferences << "\" ";
        return _out.str();
    }
};

class js_traversal_DocumentTraversal : public virtual traversal::DocumentTraversal, public v8_wrapper::Registrator< js_traversal_DocumentTraversal > {
public:
    js_traversal_DocumentTraversal() {}
    static v8::Handle<v8::Value> static_createNodeIterator(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createNodeIterator(v8::Handle<v8::Value> val_root, long unsigned int val_whatToShow, v8::Handle<v8::Value> val_filter, bool val_entityReferenceExpansion);
    static v8::Handle<v8::Value> static_createTreeWalker(const v8::Arguments& args);
    virtual v8::Handle<v8::Value> createTreeWalker(v8::Handle<v8::Value> val_root, long unsigned int val_whatToShow, v8::Handle<v8::Value> val_filter, bool val_entityReferenceExpansion);

    virtual const std::string get_fields() {
        std::ostringstream _out;
        return _out.str();
    }
};

#endif

