/*
    scanServer is the web-application audit program
    Copyright (C) 2009 Andrew "Stinger" Abramov stinger911@gmail.com

    This file is part of scanServer

    scanServer is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    scanServer is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with inventoryScanner.  If not, see <http://www.gnu.org/licenses/>.
*/
#include <weLogger.h>
#include <weHelper.h>
#include <weiStorage.h>
#include "weObject.h"

std::string WeScanObject::ToXml( void )
{
    string retval;
    string strData;

    retval = "";

    LOG4CXX_TRACE(WeLogger::GetLogger(), "WeScanObject::ToXml");
    retval += "<object id='" + WeScreenXML(ObjectId) + "'>\n";
    retval += "  <obj_name>" + WeScreenXML(ObjName) + "</obj_name>\n";
    retval += "  <host_addr>" + WeScreenXML(Address) + "</host_addr>\n";
    retval += "</object>\n";
    return retval;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
/// @fn void WeScanObject::FromXml( string input )
///
/// @brief  Initializes this object from the given from XML. 
///
/// This function reconstructs object back from the XML generated by the @b ToXml function
///
/// @param  input - The input XML. 
////////////////////////////////////////////////////////////////////////////////////////////////////
void WeScanObject::FromXml( string input )
{
    WeStrStream st(input.c_str());
    WeTagScanner sc(st);

    LOG4CXX_TRACE(WeLogger::GetLogger(), "WeScanObject::FromXml - string");
    FromXml(sc);
}

void WeScanObject::FromXml( WeTagScanner& sc, int token /*= -1 */ )
{
    int pos;
    int parseLevel = 0;
    bool inParsing = true;
    string name, val, dat;

    LOG4CXX_TRACE(WeLogger::GetLogger(), "WeScanObject::FromXml - WeTagScanner");
    while (inParsing)
    {
        pos = sc.GetPos();
        if (token == -1) {
            token = sc.GetToken();
        }
        switch(token)
        {
        case wstError:
            LOG4CXX_WARN(WeLogger::GetLogger(), "WeScanObject::FromXml parsing error");
            inParsing = false;
            break;
        case wstEof:
            LOG4CXX_TRACE(WeLogger::GetLogger(), "WeScanObject::FromXml - EOF");
            inParsing = false;
            break;
        case wstTagStart:
            name = sc.GetTagName();
            if (parseLevel == 0)
            {
                if (iequals(name, weObjTypeObject))
                {
                    parseLevel = 1;
                    dat = "";
                }
                else {
                    LOG4CXX_WARN(WeLogger::GetLogger(), "WeScanObject::FromXml unexpected tagStart: " << name);
                    inParsing = false;
                }
                break;
            }
            if (parseLevel == 1)
            {
                parseLevel = 2;
                dat = "";
                break;
            }
            LOG4CXX_WARN(WeLogger::GetLogger(), "WeScanObject::FromXml unexpected tagStart: " << name);
            inParsing = false;
            break;
        case wstTagEnd:
            name = sc.GetTagName();
            if (parseLevel == 1)
            {
                if (iequals(name, weObjTypeObject))
                {
                    parseLevel = 0;
                    dat = "";
                    inParsing = false;
                }
                else {
                    LOG4CXX_WARN(WeLogger::GetLogger(), "WeScanObject::FromXml unexpected wstTagEnd: " << name);
                    inParsing = false;
                }
            }
            if (parseLevel == 2)
            {
                dat = WeUnscreenXML(dat);
                if (iequals(name, "obj_name"))
                {
                    ObjName = dat;
                }
                if (iequals(name, "host_addr"))
                {
                    Address = dat;
                }
                parseLevel = 1;
            }
            break;
        case wstAttr:
            name = sc.GetAttrName();
            val = sc.GetValue();
            val = WeUnscreenXML(val);
            if (parseLevel == 1)
            {
                if (iequals(name, "id"))
                {
                    ObjectId = val;
                }
            }
            break;
        case wstWord: 
        case wstSpace:
            dat += sc.GetValue();
            break;
        default:
            break;
        }
        token = -1;
    }
}
